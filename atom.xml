<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Prasenjit Kumar Nag a.k.a Joy]]></title>
  <link href="http://joycse06.github.io/atom.xml" rel="self"/>
  <link href="http://joycse06.github.io/"/>
  <updated>2016-07-31T13:16:45+10:00</updated>
  <id>http://joycse06.github.io/</id>
  <author>
    <name><![CDATA[Joy Nag]]></name>
    <email><![CDATA[joyruet06@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Understanding the Ubiquitous Notion of Mapping Over a Structure]]></title>
    <link href="http://joycse06.github.io/blog/2016/07/understanding-the-ubiquitous-notion-of-mapping-over-a-structure/"/>
    <updated>2016-07-31T10:53:05+10:00</updated>
    <id>http://joycse06.github.io/blog/2016/07/understanding-the-ubiquitous-notion-of-mapping-over-a-structure</id>
    <content type="html"><![CDATA[<h2>What is Map?</h2>

<p>The notion of Map has become so prevalent in all programming languages that almost everyone has some kind of exposure to it. Generically speaking, <code>Map</code> means applying a function to values which are inside some kind of structure.</p>

<p>We usually use it a lot to apply a function to a list of values e.g mapping over the values of an <code>Array or List</code> to be more specific.</p>

<p>In this post we will first see some examples of mapping in different languages and then we dive deep into it&rsquo;s internals in terms of <code>Haskell</code> and maybe finish with a better understanding of how everything fits together. Saying that lets start.</p>

<!-- more -->


<h2>Some examples of Mapping in some popular langauges</h2>

<h3>JS and JQuery</h3>

<figure class='code'><figcaption><span>Map</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='JS'><span class='line'><span class="c1">// copies from MDN</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">roots</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span> <span class="c1">// =&gt; [ 1, 4, 9]</span>
</span><span class='line'><span class="c1">// the above code squares all values of the array</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// In jQuery we always do things like</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;:checkbox&quot;</span> <span class="p">)</span>
</span><span class='line'>  <span class="c1">// which returns all checkboxes</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="c1">// it applies the anonymous function over that collection of checkboxes and just return</span>
</span><span class='line'><span class="c1">// their ids</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Ruby</h3>

<figure class='code'><figcaption><span>Map</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="n">n</span> <span class="o">*</span> <span class="n">n</span> <span class="p">}</span> <span class="c1">#=&gt; [1, 4, 9]</span>
</span><span class='line'><span class="sr">//</span> <span class="n">which</span> <span class="n">just</span> <span class="n">squares</span> <span class="n">all</span> <span class="n">the</span> <span class="n">values</span> <span class="n">inside</span> <span class="n">the</span> <span class="n">array</span>
</span></code></pre></td></tr></table></div></figure>


<h3>PHP</h3>

<figure class='code'><figcaption><span>Map</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Php'><span class='line'><span class="nv">$square</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$n</span> <span class="o">*</span> <span class="nv">$n</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="nb">array_map</span><span class="p">(</span><span class="nv">$square</span><span class="p">,</span> <span class="nv">$arr</span><span class="p">)</span> <span class="c1">// =&gt; [1, 4, 9]</span>
</span><span class='line'><span class="c1">// Array is a primitive data type in PHP so we can&#39;t do</span>
</span><span class='line'><span class="c1">// $arr.map.....</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Map internals with Haskell</h2>

<p>So lets see how an implementation of a <code>Map</code> function in Haskell looks like</p>

<figure class='code'><figcaption><span>Map implementation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Haskell'><span class='line'><span class="nf">map</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">b</span><span class="p">]</span>
</span><span class='line'><span class="c1">-- type signature of map, which says map takes a function ( a -&gt; b ) and a list ( [a] )</span>
</span><span class='line'><span class="c1">-- apply the function on all elements of that list and returns another list ([b])</span>
</span><span class='line'><span class="nf">map</span> <span class="n">f</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="c1">-- base case if the function is empty just return an empty list</span>
</span><span class='line'><span class="nf">map</span> <span class="n">f</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">f</span> <span class="n">x</span> <span class="kt">:</span> <span class="p">(</span><span class="n">map</span> <span class="n">f</span> <span class="n">xs</span><span class="p">)</span>
</span><span class='line'><span class="c1">-- otherwise apply the function to first element ( head )</span>
</span><span class='line'><span class="c1">-- and call map recursively on the rest of the list ( tail )</span>
</span><span class='line'><span class="c1">-- on a side note (:) is called the cons constructor which adds an element to a list</span>
</span><span class='line'><span class="c1">-- lets see how a simple function like (+1) it will apply to the list [1,2]</span>
</span><span class='line'><span class="c1">-- map (+1) [1,2]</span>
</span><span class='line'><span class="c1">-- (+1) 1 : (+1) 2 : [] ( this [] is coming from the base case of the recursion above) </span>
</span><span class='line'><span class="c1">-- 2 : 3 : []</span>
</span><span class='line'><span class="c1">-- [2, 3]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You see how partially applied functions ( <code>(+1)</code> above ) comes in handy.</p>

<p>It&rsquo;s pretty simple right. But why contrain this great idea to only a list of values. Haskell takes it a step further
and generalizes it with an Abstraction named <code>Functor</code>. I will not get into details of <code>Functors</code> but will just use that to demonstrate the generic notion of mapping over a structure. So what is this structure thing I am talking about.</p>

<p>In the application above the list is the structure, it&rsquo;s characteristic is to hold a list of values. <code>Tree</code> is another structure which has <code>leafs</code> and <code>branches</code>. They are ways of organizing data.</p>

<p>The notion of <code>map</code> in generic sense is to apply a function over a strucure. Think of it like you want to throw a function over some kind of structure and apply it to the values inside. This can be any kind of strucure defined by you or in haskell <code>Types</code>. Haskell has a <code>TypeClass</code> named <code>Functor</code> which any custom type can implement and thereby define how map should work for that type.</p>

<p>Lets see how this works for a <code>Tree</code> type.</p>

<figure class='code'><figcaption><span>Tree</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Haskell'><span class='line'><span class="kr">data</span> <span class="kt">Tree</span> <span class="n">a</span> <span class="ow">=</span> <span class="kt">Leaf</span> <span class="n">a</span> <span class="o">|</span> <span class="kt">Branch</span> <span class="p">(</span><span class="kt">Tree</span> <span class="n">a</span><span class="p">)</span> <span class="p">(</span><span class="kt">Tree</span> <span class="n">a</span><span class="p">)</span> <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Show</span><span class="p">)</span>
</span><span class='line'><span class="c1">-- in laymen term is defines a tree data type, which has either a leaf or a branch with left</span>
</span><span class='line'><span class="c1">-- or right subtree</span>
</span><span class='line'><span class="c1">-- we can also see it&#39;s a recursive data structure as it&#39;s left and right subtree holds same structure</span>
</span><span class='line'><span class="c1">-- we get a sense of that from the definition itself</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now how should map works for this structure. In case of list we only had a list of values. In case of our <code>Tree</code> its a bit different but we still have values in the leaves which we may want to transform, as the owner of the <code>Data Type</code> we know best how to apply the function and on which data inside our structure to apply it to.</p>

<p>Let&rsquo;s see how we can define a <code>map</code> function for our tree.</p>

<figure class='code'><figcaption><span>treeMap</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Haskell'><span class='line'><span class="nf">treeMap</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Tree</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Tree</span> <span class="n">b</span>
</span><span class='line'><span class="nf">treeMap</span> <span class="n">f</span> <span class="p">(</span><span class="kt">Leaf</span> <span class="n">x</span><span class="p">)</span> <span class="ow">=</span> <span class="kt">Leaf</span> <span class="p">(</span><span class="n">f</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="nf">treeMap</span> <span class="n">f</span> <span class="p">(</span><span class="kt">Branch</span> <span class="n">left</span> <span class="n">right</span><span class="p">)</span> <span class="ow">=</span> <span class="kt">Branch</span> <span class="p">(</span><span class="n">treeMap</span> <span class="n">f</span> <span class="n">left</span><span class="p">)</span> <span class="p">(</span><span class="n">treeMap</span> <span class="n">f</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- example</span>
</span><span class='line'><span class="nf">treeMap</span> <span class="p">(</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="kt">Branch</span> <span class="p">(</span><span class="kt">Branch</span> <span class="p">(</span><span class="kt">Leaf</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="kt">Leaf</span> <span class="mi">2</span><span class="p">))</span> <span class="p">(</span><span class="kt">Branch</span> <span class="p">(</span><span class="kt">Leaf</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="kt">Leaf</span> <span class="mi">4</span><span class="p">)))</span>
</span><span class='line'><span class="c1">-- which multiplies 2 to every leaf of the tree and returns the new tree as below</span>
</span><span class='line'><span class="kt">Branch</span> <span class="p">(</span><span class="kt">Branch</span> <span class="p">(</span><span class="kt">Leaf</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="kt">Leaf</span> <span class="mi">4</span><span class="p">))</span> <span class="p">(</span><span class="kt">Branch</span> <span class="p">(</span><span class="kt">Leaf</span> <span class="mi">6</span><span class="p">)</span> <span class="p">(</span><span class="kt">Leaf</span> <span class="mi">8</span><span class="p">))</span>
</span><span class='line'><span class="c1">-- See all the leafs has been multiplied by 2</span>
</span><span class='line'><span class="c1">-- lets see function composition fits in here if we first want to multiply by 2 and then negate the numbers</span>
</span><span class='line'><span class="c1">-- we can do something like</span>
</span><span class='line'><span class="nf">treeMap</span> <span class="p">(</span><span class="n">negate</span><span class="o">.</span> <span class="p">(</span><span class="o">*</span><span class="mi">2</span><span class="p">))</span> <span class="p">(</span><span class="kt">Branch</span> <span class="p">(</span><span class="kt">Branch</span> <span class="p">(</span><span class="kt">Leaf</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="kt">Leaf</span> <span class="mi">2</span><span class="p">))</span> <span class="p">(</span><span class="kt">Branch</span> <span class="p">(</span><span class="kt">Leaf</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="kt">Leaf</span> <span class="mi">4</span><span class="p">)))</span>
</span><span class='line'><span class="c1">-- function composition for the win</span>
</span><span class='line'><span class="c1">-- it should return</span>
</span><span class='line'><span class="kt">Branch</span> <span class="p">(</span><span class="kt">Branch</span> <span class="p">(</span><span class="kt">Leaf</span> <span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">))</span> <span class="p">(</span><span class="kt">Leaf</span> <span class="p">(</span><span class="o">-</span><span class="mi">4</span><span class="p">)))</span> <span class="p">(</span><span class="kt">Branch</span> <span class="p">(</span><span class="kt">Leaf</span> <span class="p">(</span><span class="o">-</span><span class="mi">6</span><span class="p">))</span> <span class="p">(</span><span class="kt">Leaf</span> <span class="p">(</span><span class="o">-</span><span class="mi">8</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oh I forgot to say <code>map</code> is a way of transforming data as thats the only way you can chagne data in <code>Pure functinal programming</code> as you can&rsquo;t mutate them in place. But we are lazy programmers, why define a new method or force others to define new map functions for our data types. Haskell abstracts this with <code>Functor</code> as I mentioned above. So lets define an instance of <code>Functor</code> for our tree data type.</p>

<figure class='code'><figcaption><span>Functor instance of Tree</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Haskell'><span class='line'><span class="kr">instance</span> <span class="kt">Functor</span> <span class="kt">Tree</span> <span class="kr">where</span>
</span><span class='line'>    <span class="n">fmap</span> <span class="n">f</span> <span class="p">(</span><span class="kt">Leaf</span> <span class="n">x</span><span class="p">)</span> <span class="ow">=</span> <span class="kt">Leaf</span> <span class="p">(</span><span class="n">f</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>    <span class="n">fmap</span> <span class="n">f</span> <span class="p">(</span><span class="kt">Branch</span> <span class="n">left</span> <span class="n">right</span><span class="p">)</span> <span class="ow">=</span> <span class="kt">Branch</span> <span class="p">(</span><span class="n">fmap</span> <span class="n">f</span> <span class="n">left</span><span class="p">)</span> <span class="p">(</span><span class="n">fmap</span> <span class="n">f</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'><span class="c1">-- it&#39;s same as our treeMap and does the same thing</span>
</span></code></pre></td></tr></table></div></figure>


<p> Once we have our <code>Functor</code> instance for <code>Tree</code> we can use the generic <code>fmap</code> function now to do the same thing we did above</p>

<figure class='code'><figcaption><span>fmap example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Haskell'><span class='line'> <span class="kr">let</span> <span class="n">tree</span> <span class="ow">=</span> <span class="p">(</span><span class="kt">Branch</span> <span class="p">(</span><span class="kt">Branch</span> <span class="p">(</span><span class="kt">Leaf</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="kt">Leaf</span> <span class="mi">2</span><span class="p">))</span> <span class="p">(</span><span class="kt">Branch</span> <span class="p">(</span><span class="kt">Leaf</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="kt">Leaf</span> <span class="mi">4</span><span class="p">)))</span>
</span><span class='line'>  <span class="n">fmap</span> <span class="p">(</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span> <span class="n">tree</span>
</span><span class='line'>  <span class="c1">-- or</span>
</span><span class='line'>  <span class="n">fmap</span> <span class="p">(</span><span class="n">neg</span> <span class="o">.</span> <span class="p">(</span><span class="o">*</span><span class="mi">2</span><span class="p">))</span> <span class="n">tree</span>
</span></code></pre></td></tr></table></div></figure>


<p>  So the generic notion is <code>Map</code> is not just for array or list of values, rather it&rsquo;s a very powerful idea to apply any function over any kind of structures no matter how complex they are.</p>

<p>  Hope you enjoyed it. We may talk more about <code>Functors</code> later and see how haskell takes this idea of mapping to a whole new level and make it a lot more useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Haskell -- Partial Function Application]]></title>
    <link href="http://joycse06.github.io/blog/2016/07/hello-haskell-partial-function-applicaton/"/>
    <updated>2016-07-24T12:50:05+10:00</updated>
    <id>http://joycse06.github.io/blog/2016/07/hello-haskell-partial-function-applicaton</id>
    <content type="html"><![CDATA[<p>In this blog post, We will be talking shortly about Haskell&rsquo;s type system( which is a very broad topic, this post won&rsquo;t eve scratch the surface). I will just explain what is needed to explain <code>partial function application</code> means and how is it done in Haskell.</p>

<p>N.B. Installing Haskell is very easy with <a href="https://docs.haskellstack.org/en/stable/README/">Stack</a>, if you are on a Mac, you can just do <code>brew install haskell-stack</code> to install Stack. Then starting the <code>repl</code> is as easy as writing <code>stack ghci</code> in your favorite terminal.</p>

<p>Haskell is a statically typed functional programming language. That means everything has a type associated with it and the compiler checks and enforce types at compile time. So there are two phases of code in Haskell one is <code>Type Level Code</code> which involves type definition, type constructors etc. Another is <code>Term Level Code</code> which is the body of the program. That doesn&rsquo;t necessarily mean you will always have to write type signatures for trivial things. Haskell has a very powerful <code>Type Inference</code> system which can infer types from untyped code, so you don&rsquo;t have to specify types of all the things but Haskell will infer them from the code and complain if types of anything doesn&rsquo;t match. It uses <code>Hindley-Milner Inference</code> algorithm( well, an extended version of it for <code>Constrained Types</code>).</p>

<!-- more -->


<h2>What are types?</h2>

<p>Types are how we group a set of values together that share something in common. Sometime that something is abstract and sometime that something is a specific model of a particular concept or domain. We can think of types as <code>Set</code> from mathematics to better guide our intuition. So for example what is the type of number 2, well it&rsquo;s a number, a member of the set of <code>Natural Numbers</code>. Type of <code>a</code> is character. You know this if you have worked with any statically typed programming language before like <code>C/C++ or Java</code>. However Haskell takes it to a whole new level.</p>

<h2>How do we define types for a simple addition function?</h2>

<p>Let&rsquo;s write the function signature first then we will explain it.</p>

<figure class='code'><figcaption><span>Type of an add Function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Haskell'><span class='line'><span class="c1">-- declare the type of the function</span>
</span><span class='line'><span class="nf">add</span> <span class="ow">::</span> <span class="kt">Integer</span> <span class="ow">-&gt;</span> <span class="kt">Integer</span> <span class="ow">-&gt;</span> <span class="kt">Integer</span>
</span><span class='line'><span class="c1">-- now declare the function itself</span>
</span><span class='line'><span class="nf">add</span> <span class="n">x</span> <span class="n">y</span> <span class="ow">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span></code></pre></td></tr></table></div></figure>


<p>What we are telling the Compiler by this is we have an <code>add</code> function which takes two
<code>integer</code> and returns result by adding them. If you we remember what I was telling about currying <a href="http://joycse06.github.io/blog/2016/07/intro-to-lambda-calculus-and-its-relation-to-functional-programming/">in my previous post</a> you can&rsquo;t accept two params into a single function. You have to define them a nested lambdas, but it&rsquo;s a syntactic sugar Haskell provides to make it more useful, still make the core conform to whatever lambda calculus provides.
So the above function is pretty straight forward. Lets get to the point and talk about the main focus of this blog post.</p>

<h2>Partial function application</h2>

<p>Partial application is the notion of supplying less arguments than the function expects. Let&rsquo;s see an example, we defined an <code>add</code> function in previous section, now if we want to define an <code>increment</code> function in terms of it we can do something like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Haskell'><span class='line'><span class="nf">inc</span> <span class="ow">::</span> <span class="kt">Integer</span> <span class="ow">-&gt;</span> <span class="kt">Integer</span>
</span><span class='line'><span class="nf">inc</span> <span class="ow">=</span> <span class="n">add</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>ahh that seems simple, now lets explain how that works. We are assigning value of <code>add 1</code> as the body of our <code>inc</code> function.</p>

<p>We know from the type signature of <code>add</code> that it takes two integer and return their sum. So what happens when we supply it only one argument. We the value <code>1</code> gets bound to the first param <code>x</code> in the definition of <code>add</code> function and we get something like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">add</span> <span class="mi">1</span> <span class="n">y</span> <span class="ow">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'><span class="c1">-- which is equivalent to</span>
</span><span class='line'><span class="nf">\</span><span class="n">y</span> <span class="ow">-&gt;</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">y</span> <span class="c1">-- a lambda which just add one to it&#39;s argument</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which is another function. A partially applied one. If we want to see it from the point of Lambda Calculus it will be more clear</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># our add functions equivalent lambda calculus expression will be</span>
</span><span class='line'>𝜆x.𝜆y.x+y
</span><span class='line'><span class="c"># now if we apply 1 to it</span>
</span><span class='line'><span class="o">(</span>𝜆x.𝜆y.x+y<span class="o">)</span> 1
</span><span class='line'><span class="c"># which gets bound to the left most lambda and it becomes</span>
</span><span class='line'>𝜆y.1+y
</span><span class='line'><span class="c"># because we can get rid of a lambda after its applied to a value</span>
</span><span class='line'><span class="c"># finally what we get is a another lambda waiting for an argument</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thats what is happening with our <code>add</code> function too because haskell is typed lambda calculus. So <code>add 1</code> is an partially applied function waiting for another application to a value. It&rsquo;s easy but a very powerful idea, and lets one write cool functions in terms of other simpler functions. <em>Composability for the win!.</em></p>

<p>We can similarly write these functions too,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Haskell'><span class='line'><span class="nf">multiplyTen</span> <span class="ow">=</span> <span class="p">(</span><span class="mi">10</span> <span class="o">*</span> <span class="p">)</span>
</span><span class='line'><span class="c1">-- * is a infix binary operator, so it requires two arguments</span>
</span><span class='line'><span class="c1">-- as we supplied one, it&#39;s a partially applied one and waiting for another</span>
</span><span class='line'><span class="c1">-- argument</span>
</span><span class='line'><span class="c1">-- we can invoke it like</span>
</span><span class='line'><span class="nf">multiplyTen</span> <span class="mi">10</span>
</span><span class='line'><span class="c1">-- and it will give us 100</span>
</span><span class='line'><span class="nf">helloWorld</span> <span class="ow">=</span> <span class="p">(</span><span class="s">&quot;Hello &quot;</span> <span class="o">++</span> <span class="p">)</span>
</span><span class='line'><span class="c1">-- ++ is the infix binary string concatenation operator( actually a function</span>
</span><span class='line'><span class="c1">-- requiring two arguments), we only supplied one so it&#39;s waiting for another one</span>
</span><span class='line'><span class="c1">-- if we run</span>
</span><span class='line'><span class="nf">helloWorld</span> <span class="s">&quot;World!&quot;</span>
</span><span class='line'><span class="c1">-- it will return &quot;Hello World!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The examples in this blog post were intentionally contrived but The idea of <code>partial function application</code> is a profound one and we can do all sort of cool things with it.</p>

<p>Thats all for today. Hope you enjoyed it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro to Lambda Calculus and It's Relationship to Functional Programming]]></title>
    <link href="http://joycse06.github.io/blog/2016/07/intro-to-lambda-calculus-and-its-relation-to-functional-programming/"/>
    <updated>2016-07-23T17:38:18+10:00</updated>
    <id>http://joycse06.github.io/blog/2016/07/intro-to-lambda-calculus-and-its-relation-to-functional-programming</id>
    <content type="html"><![CDATA[<p>This post is written based on the First Chapter (All you need is lambda) of the <a href="http://haskellbook.com/">HaskellBook</a> which is great book for learning Haskell. All the code examples in this post will be using Haskell but should be understandable to anyone having decent experience in any programming language.</p>

<p>Lambda calculus is a model of computation devised in the 1930s by Alanzo Church. It&rsquo;s one process for formalizing a method. Like Turing machines it formalizes the concept of effective computability, thus determining which problems or classes of problems, can be solved.
You might be thinking but thats Calculus(Math), how is it related to functional programming or programming in general. It is indeed deeply related.</p>

<!-- more -->


<p>Lets define Functional programming, we know that functional programming is a programming paradigm that relies on functions modeled on mathematical functions. The essence of functional programming is that programs are a combination of expressions. Expressions include concrete values, variables and also functions. Functional programming languages are all based on the lambda calculus. Though some of them incorporate features into the language that are not translatable into lambda expressions. Haskell doesn&rsquo;t do that because it&rsquo;s a pure functional language. We will not get into what it means for a functional programming language to be <em>Pure</em> because it&rsquo;s an topic of it&rsquo;s own.</p>

<h2>What is a function ( in Math )?</h2>

<p>We all have studied in High school math( Set theory ), that a function is a relation between a set of inputs and a set of outputs. The function itself defines and represents the relationship. For example, when you apply the addition function to two inputs, it maps those two inputs to an output &ndash; the sum of those numbers. A simple function can be <code>f(x) = x + 1</code> which takes one argument named <code>x</code>. The relationship between the input and the output is described in the function body. For this function, it will add 1 to whatever value x is and return that result.</p>

<p>When we apply the above function to a value, such as 1, we substitute the value in for x:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>f(1) = 1 + 1 = 2</span></code></pre></td></tr></table></div></figure>


<p><em>Understanding functions in this way - as a mapping of a set of inputs to a set of outputs is crucial to understanding functional programming.</em></p>

<h2>Structure of Lambda Terms</h2>

<p>The lambda calculus has three basic components, or lambda terms: <code>expressions</code>, <code>variables</code> and <code>abstractions</code>. The word <code>expression</code> refers to a superset of all those things: an expression that can be a variable name, an abstraction or a combination of those things.</p>

<p>An <em>abstraction</em> is a <em>function</em>. It is a lambda term that has a head and a body and  is applied to an argument. An argument is an input value. The head of a function is a <code>𝜆(lambda)</code> followed by a variable name.The body of the function is another expression. So a simple function might look like: <code>𝜆x.x</code> . It&rsquo;s an identity function because it just return the argument passed to it. In the previous example of <code>f(x) = x + 1</code> we were talking about a function called <code>f</code>, but the lambda abstraction <code>𝜆x.x</code> has no name. It&rsquo;s an <em>anonymous function (we all are familiar with this term, because it&rsquo;s a very powerful idea and almost all imperative languages have some sort of implementation of it too)</em>. In the definition the dot separates the parameters of the lambda function from the body.</p>

<h3>Beta reduction</h3>

<p>When we apply a function to an argument, we substitute the input expression for all instances of bound variables within the body of the abstraction. We then also eliminate the head of the abstraction, since it&rsquo;s only purpose was to bind a variable. This process is called <em>beta reduction</em>.</p>

<p>An example of a beta reduction can be:</p>

<figure class='code'><figcaption><span>Example of Beta Reduction</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>we have this lambda 𝜆x.x ,
</span><span class='line'><span class="k">if</span> we want to apply the number <span class="m">2</span> into the lambda above,
</span><span class='line'>we simply substitute <span class="m">2</span> <span class="k">for</span> each bound variable in the body of the <span class="k">function</span>,
</span><span class='line'>and eliminate the head:
</span><span class='line'><span class="o">(</span>𝜆x.x<span class="o">)</span> 2
</span><span class='line'>2
</span><span class='line'>As another example, <span class="k">if</span> we have 𝜆x.x+1
</span><span class='line'><span class="k">then</span> <span class="k">if</span> we apply <span class="m">2</span> it becomes
</span><span class='line'><span class="o">(</span>𝜆x.x+1<span class="o">)</span> <span class="nv">2</span>
</span><span class='line'><span class="o">==</span>&gt; 2+1
</span><span class='line'><span class="o">==</span>&gt; 3
</span></code></pre></td></tr></table></div></figure>


<p>I could continue and do some more complex <em>beta reductions</em> but will restrain myself</p>

<h3>Multiple arguments</h3>

<p>Each lambda can only bind one parameter and can only accept one argument. Functions that require multiple arguments have multiple, nested heads. When you apply it once and eliminate the first(left-most) head, the next one is applied and so on. This formulation is named after <em>Haskell Curry</em> and is commonly called currying. So</p>

<figure class='code'><figcaption><span>Example of Beta Reduction</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>𝜆xy.xy
</span><span class='line'>is actually convenient shorthand <span class="k">for</span> two nested lambdas<span class="o">(</span> one <span class="k">for</span> each argument, x and y<span class="o">)</span>
</span><span class='line'>like following
</span><span class='line'>𝜆x.<span class="o">(</span>𝜆y.xy<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Evaluation is simplification</h3>

<p>There is a thing named <em>beta normal form</em> in lambda calculus. It&rsquo;s a form when you can&rsquo;t beta reduce(apply lambdas to arguments) the term any further. This corresponds to a fully evaluated expression, or, in programming a fully executed program. In terms of executing a program it could mean continue applying lambda functions to their arguments until it become irreducible at which point the execution will finish. For example <code>𝜆x.x</code> is in beta normal form as we can&rsquo;t reduce it any further with what we have.
But <code>(𝜆x.x) 2</code> is not because it&rsquo;s an lambda awaiting an application so we can reduce it to <code>2</code> by replacing instances of <code>x</code> with <code>2</code> in the body of the the lambda. <code>2</code> is in <em>beta normal form</em> because it&rsquo;s a literal value and we can&rsquo;t reduce it any further.</p>

<h2>Relationship with functional programming</h2>

<p>Like I said earlier Functional programming languages are based on <em>Lambda Calculus</em>, as we have learned a bit more about <em>lambdas</em> we can relate more about how they are connected. We might have heard the phrase <em>Functions are first class citizens in functional languages</em>. Lets explain that a bit. Imperative languages usually treat functions differently than other values(variables, objects and other inhabitants of a program) in the program though that is changing with omnipresence of lambdas(anonymous) function everywhere.</p>

<p>But in functional languages functions are just like any other value. You can toss function around, return another function from a function body, compose functions to build complex functionalities from simple functions and all sorts of cool things.</p>

<p>And if the function is a pure( like mathematical one) which always return the same output for the same input you don&rsquo;t even need to care where the function is being evaluated, be it in another core of the same machine or in the cloud because you don&rsquo;t need to care. All you want is the result of applying the function to an input.</p>

<p><em>Building Software is a complex task</em> and Composability is a(<em>or is the</em>) way to handle complexity. You start with simple building blocks and compose them to build complex program to solve complex problems. Pure functions are such building blocks.</p>

<p>In a way, programs in functional languages are like reducing expressions(remember <em>beta reduction</em> from last paragraph). The compilers continue evaluating expressions until it reaches a point when it can&rsquo;t reduce the expression anymore and the execution is complete.</p>

<p>I wont get any deeper into this in this post. Research and learn more if you are still not bored.</p>

<h2>Haskell, Haskell, Haskell</h2>

<p>Haskell is purely based on <em>Lambda Calculus</em>. In fact it&rsquo;s typed lambda calculus. On the surface level it has some syntactic sugar which could lead one to believe this thing doesn&rsquo;t have a equivalent form in lambda calculus. But it ultimately boils down a very simple intermediate language construct which is then evaluated by STG(Spineless Tagless Graph-Reducing Machine) which is a abstract virtual machine and convert that code into binary. It has some very powerful abstractions understanding which properly could enable anyone to write better code in any other languages(This is not something I am saying myself, I have heard it countless times from many great programmers). By the way, Haskell is not the only language in which you can learn functional programming, but it&rsquo;s definitely one of the good ones.</p>

<h3>Some Haskell examples</h3>

<p>I will not explain any of the syntaxes, will just try to relate some of the things I mentioned above with haskell code.
You can type them in <code>ghci</code> repl and they should run fine.</p>

<h4>A lambda in haskell is very similar to lambda from lambda calculus,</h4>

<figure class='code'><figcaption><span>A simple Lambda</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">\</span><span class="n">x</span> <span class="ow">-&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="c1">-- which takes a single param and add 1 to it, we can use it like</span>
</span><span class='line'><span class="p">(</span><span class="nf">\</span><span class="n">x</span> <span class="ow">-&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Haskell supports currying, so you can define function which can take multiple arguments, like</h4>

<figure class='code'><figcaption><span>Simple Addition Function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Haskell'><span class='line'><span class="nf">add</span> <span class="n">x</span> <span class="n">y</span> <span class="ow">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'><span class="c1">-- which is in de-sugared form becomes similar to</span>
</span><span class='line'><span class="kr">let</span> <span class="n">add</span> <span class="ow">=</span> <span class="nf">\</span><span class="n">x</span> <span class="ow">-&gt;</span> <span class="nf">\</span><span class="n">y</span> <span class="ow">-&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Composing functions in Haskell is very easy</h4>

<figure class='code'><figcaption><span>Function composition</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Haskell'><span class='line'><span class="c1">-- lets define a square function</span>
</span><span class='line'><span class="kr">let</span> <span class="n">square</span> <span class="n">x</span> <span class="ow">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span>
</span><span class='line'><span class="c1">-- lets define a sum function which takes a list and add all the values</span>
</span><span class='line'><span class="kr">let</span> <span class="n">sum</span> <span class="ow">=</span> <span class="n">foldr</span> <span class="p">(</span><span class="o">+</span><span class="p">)</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- and another function which negate the argument</span>
</span><span class='line'><span class="kr">let</span> <span class="n">neg</span> <span class="ow">=</span> <span class="n">negate</span> <span class="c1">-- negate is a standard function</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- now using the above function we can define our complex function( hint: compose them)</span>
</span><span class='line'><span class="kr">let</span> <span class="n">negateSquaredSum</span> <span class="ow">=</span> <span class="n">neg</span> <span class="o">.</span> <span class="n">square</span> <span class="o">.</span> <span class="n">sum</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- now you can call it like</span>
</span><span class='line'><span class="nf">negateSquaredSum</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="c1">-- which will result in -100</span>
</span></code></pre></td></tr></table></div></figure>


<p>In our case they are simple function. But they can be anything, and we can then execute the smaller building blocks ( <code>neg</code>, <code>square</code> and <code>sum</code>) anywhere(could be other cores or maybe in the cloud) and then combine the results.</p>

<p>Its not about Haskell, you can do the above in any language, it&rsquo;s about the idea of <code>function composition</code> or in general <code>composition</code>.</p>

<p>The best thing about all the above codes no matter how complex they become, they are type checked by the compiler. Haskell is a statically and strongly typed language. So if your program compiles there&rsquo;s a much greater chance it will work.</p>

<p>Enough for a single blog post. Hope you enjoyed it. Stay tuned for more Haskell and functional programming related posts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel View Presenters From Scratch]]></title>
    <link href="http://joycse06.github.io/blog/2015/01/laravel-view-presenters-from-scratch/"/>
    <updated>2015-01-16T02:34:14+11:00</updated>
    <id>http://joycse06.github.io/blog/2015/01/laravel-view-presenters-from-scratch</id>
    <content type="html"><![CDATA[<h2>Why do We need View Presenters?</h2>

<p>View should be dumb, they shouldn&rsquo;t do much other than showing data to the user. So where&rsquo;s the correct place to place your view specific logic in Laravel. Like you need the gravatar url of the user to see if the user already has a gravatar set to save the user from uplaoding a new one in your site. Or maybe you save user name as two field in db, as <code>first_name</code> and <code>last_name</code>, now you need to create user&rsquo;s full name, but you also want apply the function <code>ucfirst</code> first on them. Or maybe you have users profile pic&rsquo;s filename saved in database, now you need to create profile pic url from that by concatenating the upload directory.</p>

<p>Where should we put this sorts of logic. Eloquent Model? This can seem a very tempting choice, but why should the Model handle View specific logics. Then where is the place to put this kind of things?</p>

<p>Well maybe in their own class whose only responsibility will be to do all the logic needed in view using a specific model.</p>

<p>In laravel, there&rsquo;s ins&rsquo;t any built in way to do 1-to-1 Model-Presenter mapping out of the box but it&rsquo;s incredibly easy to set up one.</p>

<!-- more -->


<h2>So what do we need</h2>

<ul>
<li>define a present mentod or any method in every Eloquent model which will return a presenter instance for that model and if you use anything like <code>$model-&gt;present()-&gt;gravatar_url()</code> or <code>$model-&gt;present-&gt;gravatar_url</code> both will actually call a function named <code>gravatar_url</code>on the <code>Presenter</code> class.</li>
<li>make it easy for the view to use it, like view shouldn&rsquo;t be requried to know where that url is coming from.</li>
<li>and finally maybe hide away some common Presenter functionality into an abstract class so every presenter class wont have to implement those</li>
</ul>


<h2>Implementing the present() method in every Eloquent Model</h2>

<p>The responsiblity of the <code>present()</code> method will be to</p>

<ul>
<li>first somehow dertermine the FQN(Fully Qualified Name) of the Presenter class so we can instantiate them</li>
<li>After we get that class name, we check if that class exists, and if they doesnt exist they you can either throw an exception( which is better ) or fail silently if you want. And if it&rsquo;s there then just instantiate it and return the instance.</li>
</ul>


<h3>How to determine the FQN of the Presenter Class</h3>

<p>There are several ways we can do that, it entirely depends on how we want to desing our app. We can find the Current Model&rsquo;s class name append <code>Presenter</code> in their name and search in the same directory or in a separate <code>Presenters</code> directory which is on a different namespace to find the presenter class.</p>

<p>But it&rsquo;s better not to hard code that logic inside a function and make it more flexible. Like we can look for a <code>$presenter</code> variable in the Model where we will save the Presenters full path so our funciton can use it. That way we can save the Presenter anywhere we want.</p>

<h3>Creating a Presentable Trait</h3>

<p>The functions of the <code>present()</code> method seems to be same for every models, so we could just use a trait for it and use it in every model. Lets see a reference implementation of the trait,</p>

<figure class='code'><figcaption><span>PresentableTrait</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">namespace</span> <span class="nx">Acme\Core\Presenter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">trait</span> <span class="nx">PresentableTrait</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* This is where we will save the presenterInstance so use later on the same model object */</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$presenterInstance</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">present</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Check if the preserneter property has been declared on the model and </span>
</span><span class='line'>        <span class="c1">// the class exists</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="o">!</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">presenter</span> <span class="k">or</span> <span class="o">!</span> <span class="nb">class_exists</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">presenter</span><span class="p">)){</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// We didn&#39;t find a presenter class, throw an exception</span>
</span><span class='line'>            <span class="c1">// I am assuming we have a PresenterException defined already</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nx">PresenterException</span><span class="p">(</span><span class="s1">&#39;Please set the Presenter path to your Presenter FQN&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// The good old Singleton pattern</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="o">!</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">presenterInstance</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">presenterInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">presenter</span><span class="p">(</span><span class="nv">$this</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">presenterInstance</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The functionality of the trait is fairly straight forward. We have a variable called <code>$persenterInterface</code> to save the <code>Presenter Instance</code> for further use. I have added comments on the code to make it easier to understand.</p>

<h3>Creating a base Presenter class</h3>

<p>We can ignore this if we want, just adding the <code>Presenter Class</code> is enough for the functionality. But lets add some sytactic sugar using the <code>__get()</code> magic method so when you do something like <code>$user-&gt;present()-&gt;gravatar_url</code> it actually calls the method with that name. Though <code>gravatar_url</code> is actually a method on the presenter we will be able to use it like a property.</p>

<p>Lets check the following abstract Presenter class</p>

<figure class='code'><figcaption><span>Base Presenter Class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">namespace</span> <span class="nx">Acme\Core\Presenter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">Presenter</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$entity</span><span class="p">;</span> <span class="c1">// This is to store the original model instance</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$entity</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">entity</span> <span class="o">=</span> <span class="nv">$entity</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Call the function if that exsits, or return the property on the original model</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__get</span><span class="p">(</span><span class="nv">$property</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nb">method_exists</span><span class="p">(</span><span class="nv">$this</span><span class="p">,</span> <span class="nv">$property</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$property</span><span class="p">}();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">entity</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$property</span><span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above trait we actually passed the model instance to the presenter while instantiating that. And hence we have received that in the constructor of the base class.</p>

<h2>Usage</h2>

<p>Lets see how can we use this in a project with an Eloquent Model.</p>

<p>Lets do it for the <code>User</code> model. First we will define the <code>Presenter</code> class.</p>

<figure class='code'><figcaption><span>Acme\Users\UserPresenter.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">namespace</span> <span class="nx">Acme\Users</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Acme\Core\Presenter\Presenter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">UserPresenter</span> <span class="k">extends</span> <span class="nx">Presenter</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// return users gravatar url</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">gravatar</span><span class="p">(</span><span class="nv">$size</span> <span class="o">=</span> <span class="mi">30</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$email</span> <span class="o">=</span> <span class="nb">md5</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">email</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot;//www.gravatar.com/avatar/</span><span class="si">{</span><span class="nv">$email</span><span class="si">}</span><span class="s2">?s=</span><span class="si">{</span><span class="nv">$size</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">fullname</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">ucfirst</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first_name</span><span class="p">)</span><span class="o">.</span> <span class="s1">&#39; &#39;</span><span class="o">.</span><span class="nb">ucfirst</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">last_name</span><span class="p">);</span>
</span><span class='line'>      
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We see in the user Presenter we used <code>$this-&gt;email</code>, <code>$this-&gt;first_name</code> and <code>$this-&gt;last_name</code>. We are being able to do that due the magic getter method we defined which automatically returns the property on the associated model if a function with that name doesn&rsquo;t exist in the <code>Presenter</code> itself.</p>

<p>Now lets create an <code>User</code> model.</p>

<figure class='code'><figcaption><span>Acme\Users\User.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">namespace</span> <span class="nx">Acme\Users</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Acme\Core\Presenter\PresentableTrait</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="k">extends</span> <span class="nx">\Eloquent</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">use</span> <span class="nx">PresentableTrait</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$presenter</span> <span class="o">=</span> <span class="s1">&#39;Acme\Users\UserPresenter&#39;</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we are done. We can now use it like,</p>

<figure class='code'><figcaption><span>Presenter Usage</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$user</span> <span class="o">=</span> <span class="nx">User</span><span class="o">::</span><span class="na">find</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// now we can use</span>
</span><span class='line'><span class="nv">$user</span><span class="o">-&gt;</span><span class="na">present</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">gravatar_url</span><span class="p">;</span> <span class="c1">// this returns users gravatar url</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// or </span>
</span><span class='line'>
</span><span class='line'><span class="nv">$user</span><span class="o">-&gt;</span><span class="na">present</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">fullname</span><span class="p">;</span> <span class="c1">// This will return users full name</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can use those methods anywhere on any <code>model</code> instance which has the <code>Presenter</code> implemented. Be it inside your controller or in your bade templates.</p>

<p><strong><em>So now you have a clean way to place all your presentation specific logic. As they are in a single class it&rsquo;s easier to maintain and you can refactor any method&rsquo;s body anytime without worrying about breaking anything on other parts of your application.</em></strong></p>

<p>Hope you enjoyed it.</p>

<p><strong>N. B. This post is inspired by Jeffrey Way&rsquo;s View presenter related lessons on Laracasts.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Command Driven Design: The World of DTOs, Handlers and Domain Events]]></title>
    <link href="http://joycse06.github.io/blog/2015/01/command-driven-design-the-world-of-dtos-handlers-and-domain-events/"/>
    <updated>2015-01-06T05:04:18+11:00</updated>
    <id>http://joycse06.github.io/blog/2015/01/command-driven-design-the-world-of-dtos-handlers-and-domain-events</id>
    <content type="html"><![CDATA[<p>Command driven desing is quite a new buzzword in php world which the community is adopting quickly. Lets dive into some theoritical details of whats and whys of this desing patterns. Code examples will be based on <code>Laravel</code>.</p>

<h2>Coming out from the CRUD mentality</h2>

<p>We developer like to think in terms of CRUD(CREATE, READ, UPDATE, DELETE) like kind of one-to-one mapping with business needs and out models but all business needs doesn&rsquo;t go well with CRUD.</p>

<!-- more -->


<p>Like there&rsquo;s a task named <strong>Charge client</strong> for some kind of service. This action is not easily mappable to CRUD with any model. And there can be tasks which affects more than one model in complex ways. Bending the tasks or the client to think in terms of CRUD is not the solution, rather this bending should be the opposite. We developers should look for patterns to bend to our thinking process to align more with the complex business needs. Command driven design is a solution to this problem where you can have commands like <code>RegisterUserCommand</code> , <code>PublishJobCommand</code>, <code>UpdateUserProfileCommand</code>, <code>SubscribeUserToSilverPlanCommand</code> and any others use cases you have in your application.</p>

<p>There are several benefits of this using this pattern:</p>

<ol>
<li><p>You can have really skinny controllers. HTTP itself is very simple and controllers are just gateways to your application, it&rsquo;s better not do all kinds of business things in your controllers. That breaks the <code>Single Responsibility</code> principle of <code>SOLID</code>. Using commands you can easily achieve this.</p></li>
<li><p>You can have better seperation of concerns in your application. With all your busiess entities seperated from others parts of the application, command from all kinds of business tasks and unified command pipeline for handling command.</p></li>
</ol>


<p>Let me give you an example, With everything properly set up, lets see how a <code>user register</code> action method of registration controller will look like,</p>

<figure class='code'><figcaption><span>RegistrationController@register</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">pubic</span> <span class="k">function</span> <span class="nf">register</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exectute</span><span class="p">(</span><span class="nx">RegisterUserCommand</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nx">Redirect</span><span class="o">::</span><span class="na">home</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>  
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Just see how clean it looks. Dont think it doesnt perform validation or other tasks required for user registration.</p>

<p>Lets list the tasks the above action is doing under the hood.</p>

<ul>
<li>Firstly the execute command might be coming from a <code>Trait</code> which does all the heavy lifting. It creates a DTO(Data Transfer Object) with required constructor parameters required for user registration like username, email etc from the POST data.</li>
<li>Then it call the proper vaidator for that command, you can determine yourself how the command bus will determine the FQN(Fully Qualified Name) of the vaidator class. After determining that the command bus will pass the command object to the Validator for input validation and checking business constraints. If the input from user doesnt pass the validation then it might throw a <code>FormValidationException</code> for which we can set up a global exception handler and just send a response to client from that handler without returning the control to the controller action at all.</li>
<li>And if the validation passes, the command bus then determine the <code>handler</code> class for the command call maybe the <code>handle()</code> method on that class and that method create the <code>user</code> save it to database of any kind which is also decoupled from the <code>handler</code> itself.</li>
<li>After creating user the handler dispatch <code>UserHasRegistered</code> event, for which we can listen for using another listener class. Once that listener class has been invoked it can do all sorts of background tasks like, sending welcome email, adding users to a mailing list, sending confirmation email and anything else your business require. And all of that can go into the queue without keeping user waiting for this tasks.</li>
</ul>


<p>From the face of all sorts of tasks it&rsquo;s doing, it may seem intimidating at first glance. But once you have basic command bus and event dispatching system set up then just by following some convetions you can work pretty fast.</p>

<p>The real benefit of it maintanence. If you have application with a lifecycle of several years, if you don&rsquo;t follow best practices it can soon become  your headace. Even as the sole developer you will fear to touch it after sometime when its already a mess with controller actions doing all sort of things which necessarily controllers concern.</p>

<p>Another benefit of this approach is you can expose API for your project pretty easily as you have everything conatained already, exposting is just setting up new <code>routes</code> for it and You are done. Because you are doing all your heavy lifting in their self contained objects.</p>

<p>Lets clarify some terms:</p>

<h2>DTO</h2>

<p> <code>Data Transfer Objects</code> are instances of simple classes with public properties to pass between different componets of your application. A simple <code>RegisterUserCommand</code> DTO can look like (Taken from one of my personal project)</p>

<figure class='code'><figcaption><span>Saphira/Users/Commands/RegisterUserCommand.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">namespace</span> <span class="nx">Saphira\Users\Commands</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Saphira\Core\CommandBus\CommandInterface</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">RegisterUserCommand</span> <span class="k">implements</span> <span class="nx">CommandInterface</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nv">$email</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nv">$password</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nv">$password_confirmation</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nv">$username</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nv">$confirmation_code</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$username</span><span class="p">,</span> <span class="nv">$email</span><span class="p">,</span> <span class="nv">$password</span><span class="p">,</span> <span class="nv">$password_confirmation</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">email</span> <span class="o">=</span> <span class="nv">$email</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">password</span> <span class="o">=</span> <span class="nv">$password</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">username</span> <span class="o">=</span> <span class="nv">$username</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">confirmation_code</span> <span class="o">=</span> <span class="nb">bin2hex</span><span class="p">(</span><span class="nb">openssl_random_pseudo_bytes</span><span class="p">(</span><span class="mi">16</span><span class="p">));</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">password_confirmation</span> <span class="o">=</span> <span class="nv">$password_confirmation</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>as you see it has everything I need for user registration. And the cool thing is that the parameter on the the constructor of this class is auto-magically resolved form <code>laravel's Input::all()</code> store where all get and post variables are stored.</p>

<p>Likewise, A sample <code>RegisterUserHandler</code> can look like,</p>

<figure class='code'><figcaption><span>Saphira/Users/Handlers/RegisterUserHandler.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">namespace</span> <span class="nx">Saphira\Users\Handlers</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Saphira\Core\CommandBus\CommandInterface</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Saphira\Core\CommandBus\CommandHandlerInterface</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Saphira\Core\Events\DispatchableTrait</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Saphira\Users\User</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Saphira\Users\UserRepository</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">RegisterUserHandler</span> <span class="k">implements</span> <span class="nx">CommandHandlerInterface</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">use</span> <span class="nx">DispatchableTrait</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$repository</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">UserRepository</span> <span class="nv">$repository</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">repository</span> <span class="o">=</span> <span class="nv">$repository</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">handle</span><span class="p">(</span><span class="nx">CommandInterface</span> <span class="nv">$command</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$user</span> <span class="o">=</span> <span class="nx">User</span><span class="o">::</span><span class="na">register</span><span class="p">(</span>
</span><span class='line'>            <span class="nv">$command</span><span class="o">-&gt;</span><span class="na">username</span><span class="p">,</span> <span class="nv">$command</span><span class="o">-&gt;</span><span class="na">email</span><span class="p">,</span> <span class="nv">$command</span><span class="o">-&gt;</span><span class="na">password</span><span class="p">,</span>
</span><span class='line'>            <span class="nv">$command</span><span class="o">-&gt;</span><span class="na">confirmation_code</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">repository</span><span class="o">-&gt;</span><span class="na">save</span><span class="p">(</span><span class="nv">$user</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">dispatchEventsFor</span><span class="p">(</span><span class="nv">$user</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$user</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And with these two and some other classes( like <code>EventListener</code>, <code>RegisterUserValidator</code> etc) placed in proper directories my <code>RegistrationController@store</code> method is as simple as following</p>

<figure class='code'><figcaption><span>RegistrationController.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">store</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">(</span><span class="nx">RegisterUserCommand</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">Auth</span><span class="o">::</span><span class="na">login</span><span class="p">(</span><span class="nv">$user</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">Flash</span><span class="o">::</span><span class="na">success</span><span class="p">(</span><span class="s1">&#39;Your registration has been successful. You are logged in now.&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">Redirect</span><span class="o">::</span><span class="na">home</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I dont have any input validation or anything in this action as they are all done in the command pipeline.</p>

<h2>Conclusion</h2>

<p>This kinda patterns takes some time to sink your head in them, but once you have the core set up then its really feels much better working on the project and you feel confident and better about it&rsquo;s long term maintenance. I have learned most of it from this <a href="https://laracasts.com/series/commands-and-domain-events">Laracasts</a> series and from many other sources. I will be writting more about it. Stay tuned!</p>

<p>Hope you enjoyed it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I Learned From the 'Architecture, the Lost Years' Talk by Uncle Bob]]></title>
    <link href="http://joycse06.github.io/blog/2015/01/what-i-learned-from-the-architecture-the-lost-years-talk-by-uncle-bob/"/>
    <updated>2015-01-03T15:05:35+11:00</updated>
    <id>http://joycse06.github.io/blog/2015/01/what-i-learned-from-the-architecture-the-lost-years-talk-by-uncle-bob</id>
    <content type="html"><![CDATA[<p>I was watching <a href="https://www.youtube.com/watch?v=WpkDN78P884">this talk</a> from <a href="https://sites.google.com/site/unclebobconsultingllc/">Uncle Bob</a> a while ago and been thinking a lot about the content. Though he primarily talked about Rails in a Ruby Conf, the content is framework agnostic and apply to all other MVCs/frameworks as well.</p>

<!-- more -->


<p>I will be writing a summary of what I have understood so far of it.</p>

<p>Firstly, <strong>the top level directory structure of an application should not communicate any information about the tools being used to build the app.</strong></p>

<p>Like in any MVC, when we look at the top level directory of any MVC framework based app we see directories like Controllers, Models, Views etc which gives us idea about the MVC pattern which is not related to the intent of the application being developed.</p>

<p>He told that WEB is a delivery mechanism and tools are just detail of the project. The application itself should be decoupled from the tools so it&rsquo;s framework agnostic.</p>

<p>He was talking about slow tests, and told Cucumber is not slow, it&rsquo;s a nice little library. What is slow is to boot up whole Rails to run the tests? Because the application is so coupled with the tools.</p>

<p>He talked about interactors, kind of the bridge between your domain level entities and business logic with the delivery mechanism.</p>

<p>If an application can be developed that way then the domain entities/business logic could be packaged as a gem or jar and can be completly decoupled from the delivery mechanism.</p>

<p>He also told views should not be aware of business objects/entities, instead one should use some kind of bridge like viewmodel/presenters to communicate those information into views so the views are so stupid that you don&rsquo;t have to test it.</p>

<p>He was talking about a use case architecture of a project he built, where they used TDD(Red-Green-Refactor cycle) to do the whole app. It was a WiKi app. They started building it with TDD without any persistance layer, and they were storing objects in memory to do testing. Then at some point, when they were in need a persistent data store they wrote a new plugin to replace the in memory store with a file based storage. They developed the whole thing and deployed it to clients without any kind of database.</p>

<p>Then one day one client came and they need a real database due to some business policy restrictions. To fullfil that request they wrote a real database storage plugin to replace the filesytem storage with a DBMS in one day.</p>

<p>He told it as an example architecture of how a decoupled component-based can help refactor things so easily and the project was fully unit tested they could refactor and deploy it within days without worrying about breaking something.</p>

<p>Got this elements summary in <a href="http://hugo.ferreira.cc/post/28240089877/keynote-architecture-the-lost-years-by-robert">this post</a></p>

<blockquote><p>Entities — Generic application agnostic data and business rules (e.g. Order, Customer).</p>

<p>Interactors — Application specific business rules; Manipulates the relevant data from the Request Model and interacts with the Entities.</p>

<p>Boundaries / Gateways — Protocols or Interfaces.</p>

<p>Models — Dumb data structures, without methods.</p>

<p>Request Model
Response Model
View Model</p>

<p>Controllers — Convert the stuff submitted by the delivery mechanism into a delivery agnostic Request Model.</p>

<p>Presenters — Turns the delivery agnostic Response Model into a prepared “viewbified” data structure ready for easy manipulation by the view.</p>

<p>&ldquo;… so the view is so stupid that you don’t have to test it!&rdquo;</p></blockquote>

<p>Here are some good things he told in the talk:</p>

<ul>
<li><h3>Web is a delivery Mecahnism</h3></li>
<li><h3>Database is a detail and not any integral part of the intent of the applicaiton itself</h3></li>
<li><h3>A good architecture allows major decisions to be deferred, like choosing a persistance storage</h3></li>
<li><h3>A good architecture maximizes the number of decisions not made, so you can decide those later and plug them in to fit business needs or respond to changes in business logic</h3></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploring Ruby's Proc, Lambda and Blocks]]></title>
    <link href="http://joycse06.github.io/blog/2014/12/exploring-rubys-proc-lambda-and-blocks/"/>
    <updated>2014-12-30T18:56:59+11:00</updated>
    <id>http://joycse06.github.io/blog/2014/12/exploring-rubys-proc-lambda-and-blocks</id>
    <content type="html"><![CDATA[<p>I have a weakness for ROR(Ruby on Rails) partly due the reason I am always obsessed with learning to do things in better ways for a long time. I am still a noob but I want be a very good Software Architect someday, with deep knowledge and practical experience on software design and development following all the best practices.</p>

<p>And what I have found, Rails projects are naturally more likely to follow better ways of doing things, and community is much more robust. Though the reason behind my this perception can be the fact that I started with CodeIgniter mainly and worked on some some CI projects at the early stage of my Career which were initially done by some Indian developer and they did mostly everything from controller in CodeIgniter, there were no models, not rules of where to put what. It was a pure mess. Anyway, these things pushed me towards my quest for searching for better ways of doing things, and I did some research on ROR and found the community around ROR is great. They do TDD( Test Driven Design ) and there were many great tools to help developers test their code, TDD in PHP community is gaining traction too recently. But still I see most PHP devs takes testing as optional and find excuses to not write automated tests. Projects I have worked on didn&rsquo;t have chance/scope to do TDD. I am a not-so-experienced avid follower of TDD and design patterns and wanna be good on them.</p>

<!-- more -->


<p>Anyway, things are changing and TDD is more common in PHP community too, with libraries like PHPUnit, PHPSpec and Behat things became easier too.</p>

<p>I have always wanted to get involved into some ROR projects just to learn their ways of doing things and gather the framework-agnostic knowledge in it and hence improving my thinking process but that didn&rsquo;t happen for no good reason or lack of motivation. A month or so ago I was trying to get some knowledge on DDD( Domain Driven Design ) and Hexagonal Architecture but I found mostly ROR conference talks and my desire to learn ROR striked again. I was checking Ruby after a long time. And wanted to learn something new. Ruby has always amazed me for it&rsquo;s developer friendly syntax, &lsquo;Everything&rsquo;s object&rsquo; paradigm and specially for lots of awesomely-named methods on every objects.</p>

<p>I would like to give example of a few like</p>

<figure class='code'><figcaption><span>times method</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">4</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Hello Ruby!&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>which amazes me every time. Most of the languages I tried have something called primitive types and values like integers, floats, strings are treated specially. But in Ruby almost everything is object. There&rsquo;s no notion of primitive types and surprisingly at least to me even <code>classes</code> are objects too. To prove that we can do something like following in any ruby REPL</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Output from Pry</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Array</span><span class="o">.</span><span class="n">class</span> <span class="c1"># returns Class &lt; Module</span>
</span><span class='line'><span class="nb">Array</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">superclass</span> <span class="c1"># returns Module &lt; Object</span>
</span><span class='line'><span class="nb">Array</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span> <span class="c1"># returns Object &lt; BasicObject</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the hierarchy for <code>Array</code> class is</p>

<p>  <code>Array &lt; Class &lt; Module &lt; Object &lt; BasicObject</code></p>

<p>So <code>BasicObject</code> is at the top of the Ruby object Model. And every class in ruby is a subclass of that. Lets stop here, i will write about the Ruby object model another day.</p>

<p>The designer of the language have put a lot of thought on the syntax specially to make the code more readable, and make developer&rsquo;s life easier. Lets see some other syntactic awesomeness</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">email</span> <span class="o">=</span> <span class="s2">&quot;Joy Nag &lt;joy@example.com&gt;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># you can apply regex just not the string object</span>
</span><span class='line'><span class="n">email</span><span class="o">[</span><span class="sr">/&lt;(.*?)&gt;/</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span>  <span class="c1"># returns =&gt; &quot;joy@example.com&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># you can do initialization and assignment of a</span>
</span><span class='line'><span class="c1"># variable with a single liner</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="n">foo</span> <span class="o">||=</span> <span class="o">[]</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;Hello World&#39;</span> <span class="c1"># Returns an array with the</span>
</span><span class='line'>                              <span class="c1"># string &#39;Hello World&#39; appended</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># calculating sum of all elements of an array</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">num</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">num</span> <span class="p">}</span> <span class="c1"># returns 6</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># squaring all elements of a array</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="n">n</span><span class="o">*</span><span class="n">n</span> <span class="p">}</span> <span class="c1"># returns [ 1, 4, 9 ]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># selecting only the even numbers from an array</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">].</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">}</span> <span class="c1"># returns [2,4]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># and there&#39;s the very handy .each method on enumerables</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">n</span> <span class="p">}</span> <span class="c1"># prints 1 2 and 4 and returns</span>
</span><span class='line'>                            <span class="c1"># the original array</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, lets get back to the topic of this post.</p>

<p>blocks, procs and lambdas are all example of <code>closures</code> in <code>ruby</code>. In laymen term <strong>they are ways of grouping of code we want to run</strong>. Lets start with <code>Blocks</code>.</p>

<h2>Blocks</h2>

<p>Blocks are still the only thing I am aware of where the everything&rsquo;s a object rule is broken. blocks are language constructs and doesn&rsquo;t have any type. Block are handy small chunk of code which can be passed around easily to methods to change the way of how they will behave. Kind of like allowing the user of a function or method to inject behaviors to that method based on what the output of that function or method changes. Like if we see from our previous example</p>

<figure class='code'><figcaption><span>Block example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">].</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># { |n| n % 2 == 0 } is a block which takes one argument</span>
</span><span class='line'>                    <span class="c1"># and return true or false based on the condition</span>
</span></code></pre></td></tr></table></div></figure>


<p> Block can be of two form. If the content of the block is small to fit in a line then you can just enclose that in <code>{}</code>. And if the content if larger you can use the <code>do end</code> construct to create the block. Lets re-implement a simple version of the <code>map</code> method of array class. Ohh, here&rsquo;s one catch, Ruby system classes are open and you can add or overwrite any method on any system class at your own risk. It&rsquo;s a great power and if not done carefully can cause mess in your program.</p>

<figure class='code'><figcaption><span>mymap method</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Array</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">mymap</span>
</span><span class='line'>        <span class="n">out</span> <span class="o">=</span> <span class="o">[]</span> <span class="c1"># where we will be collecting the transformed values</span>
</span><span class='line'>                 <span class="c1"># after passing them through the block</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">block_given?</span>
</span><span class='line'>            <span class="c1"># a block has been passed, we are good</span>
</span><span class='line'>            <span class="nb">self</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">elem</span><span class="o">|</span> <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="k">yield</span><span class="p">(</span><span class="n">elem</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="c1"># block was not given, so return an enumerator like the</span>
</span><span class='line'>            <span class="c1"># original map method</span>
</span><span class='line'>            <span class="n">out</span> <span class="o">=</span> <span class="n">to_enum</span> <span class="ss">:mymap</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">out</span> <span class="c1"># this returns the transformed array</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># now we can use it like [1,2,3].mymap { |n| n*2 } to double</span>
</span><span class='line'><span class="c1"># every element of the array</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can see several other things about blocks here in this example, like you can check if a block was passed with the <code>block_given?</code> method and decide what to do if block was not given. Another reason we need to do this defensive thing is if we call <code>yield</code> anyway and if the method is called without a block, then the execution will halt with a <code>LocalJumpError</code> which we probably dont want.</p>

<p>So the way to execute a block is to is by call the system method <code>yield</code> and we can pass in any number of argument to it and  and it will return the output of the block. <code>yield</code> is magical because every object oriented rule in Ruby in suspended for this special mode of operation.</p>

<p>Blocks are too mainstream in ruby programs and found almost everywhere. Due to this conveninece  and other ways to enumerate are rarely used. After seeing this when there&rsquo;s these awesome ways to loop though a list or array why would anyone use traditional  <code>for while do-while</code> if not absolutely necessary.</p>

<p>Ok there lot more to block itself. Like you can&rsquo;t pass more than one block to a method. Blocks which are passed implicitly to a method can be converted to a explicit method parameter using <code>&amp;</code> . Like we can do the following</p>

<figure class='code'><figcaption><span>Converting Implicit blocks to Explicit named parameter</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">calculate</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span> <span class="c1"># &amp;block is an explicit param</span>
</span><span class='line'>    <span class="n">block</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># then you can call it like</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">calculcate</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="o">|</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can do the other way around too, like converting a lambda into a implicit block and pass it to a function which doesnt receive a explicit block.</p>

<p>lets talk about lambdas.</p>

<h2>Lambdas</h2>

<p> <code>Lambdas</code> are actually <code>Proc</code> objects which slight differences. <code>lambda</code> is a keyword and not a function which return an instance of class <code>Proc</code>. We can check this using the following</p>

<figure class='code'><figcaption><span>Lambda and Procs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Hello world&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">lam</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Hello World&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">proc</span><span class="o">.</span><span class="n">class</span> <span class="c1"># returns &#39;Proc&#39;</span>
</span><span class='line'><span class="n">lam</span><span class="o">.</span><span class="n">class</span>  <span class="c1"># returns &#39;Proc&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>lambdas are kind of named blocks which can be passed around functions without conversions which is necessary for blocks.</p>

<p>Lets look at a slightly complex exercise from Rubymonk which I had hard time understanding first. Understanding this will help clear many things about the conversions</p>

<figure class='code'><figcaption><span>Implicit Explicit conversions</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Filter</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="k">do</span> <span class="o">|</span><span class="n">array</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="o">|</span>
</span><span class='line'>    <span class="n">array</span><span class="o">.</span><span class="n">select</span> <span class="o">&amp;</span><span class="n">block</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># now we can use this filter method like</span>
</span><span class='line'>
</span><span class='line'><span class="no">Filter</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">]</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">number</span><span class="o">|</span> <span class="n">number</span><span class="o">.</span><span class="n">even?</span> <span class="p">}</span> <span class="c1"># returns [2,4]</span>
</span><span class='line'><span class="c1"># or</span>
</span><span class='line'><span class="no">Filter</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">number</span><span class="o">|</span> <span class="n">number</span><span class="o">.</span><span class="n">integer?</span> <span class="p">}</span> <span class="n">returns</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="c1"># returns [1,3]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So lets break the Filter lambda down, that lambda takes two arguments first is an array and second is an explicit block so when we are calling it like</p>

<p> <code>Filter.call([1, 2, 3, 4]) {|number| number.even? }</code> the block passed to the call method is implicit. But as our lambda takes an explicit block we are converting it while defining the arguments in the lambda like <code>&amp;block</code> which converts any implicit block passed to a method or lambda to a named parameter. Then we are calling <code>Array.select</code> method inside it which on the other hand takes an implicit block. So time to convert the named parameter again to pass it to the <code>Array.select</code> method. Thats why we are doing it like <code>array.select &amp;block</code>. So this two way conversion should have cleared your head around the conversion.</p>

<h2>Proc</h2>

<p> <code>Proc</code> is a short for <code>Procedure</code> and its a class in <code>Ruby</code>. We can define a proc like</p>

<figure class='code'><figcaption><span>Proc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">p</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;hello Proc&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># and then we can use p just like any other variable</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span><span class="o">.</span><span class="n">call</span>  <span class="c1"># prints hello Proc</span>
</span><span class='line'><span class="nb">p</span><span class="o">.</span><span class="n">class</span> <span class="c1"># returns Proc</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="nb">p</span>   <span class="c1"># a now equals p</span>
</span><span class='line'><span class="nb">p</span>       <span class="c1"># it returns the proc object</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Differences between Block, Proc and Lambda</h2>

<p>Unlike block the other two are instances of the <code>Proc</code> class and they can have standalone existance. while block is just part of the <code>Syntax</code> of a method call. It doesn&rsquo;t mean anything on a standalone basis and can only appear in argument lists.</p>

<p> Like both <code>{ puts "hello block" }</code> and <code>a = { puts "hello block" }</code> causes <code>Syntax Error</code>.</p>

<p> At most only one block can be present in an argument list. In contrast you can pass around multiple procs to methods.</p>

<p>Like I said earlier, <code>lambda</code> and <code>proc</code> are both instances of the <code>Proc</code> class. But the have slight differences. I will go over them briefly below:</p>

<ol>
<li>Lambdas check the number of arguments, while procs do not</li>
</ol>


<p>This one is fairly straight forward and doesn&rsquo;t require much of a explanation. Lambdas halts execution with <code>ArgumentError</code> if the number of argument mismatch. While <code>Proc</code> return nill if no argument is passed, or ignore extra arguments if more arguments are provided.</p>

<ol>
<li>Lambdas and procs treat the <code>return</code> keyword differently</li>
</ol>


<p> <code>return</code> inside of a lambda triggers the code right outside of the lambda code. Lets see an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">lambda_test</span>
</span><span class='line'>  <span class="n">lam</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">lam</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Hello world&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">lambda_test</span>                 <span class="c1"># calling lambda_test prints &#39;Hello World&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>so we see the <code>return</code> statement inside the <code>lambda</code> return the control of the code right outside of the lambda code. and the <code>puts</code> call execute properly.</p>

<p>while on the contrary</p>

<p> <code>return</code> inside of a proc triggers the code outside of the method where the proc is being executed</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">proc_test</span>
</span><span class='line'>  <span class="nb">proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>  <span class="nb">proc</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Hello world&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">proc_test</span>                 <span class="c1"># calling proc_test prints nothing</span>
</span></code></pre></td></tr></table></div></figure>


<p>so we see the <code>return</code> statement in the <code>proc</code> return from the <code>proc_test</code> function itself.</p>

<p>So that&rsquo;s it for a single post. I have been following the courses at <a href="https://rubymonk.com/">Ruby Monk</a> and they are great with exercises and all. Using <code>Pry</code> for trying out different things instead of the bundled <code>irb</code> as <code>REPL</code>.</p>

<p>Hope you enjoyed it! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Programming : My Intro to Higher Order Functions]]></title>
    <link href="http://joycse06.github.io/blog/2014/12/functional-programming-my-intro-to-higher-order-functions/"/>
    <updated>2014-12-15T17:14:01+11:00</updated>
    <id>http://joycse06.github.io/blog/2014/12/functional-programming-my-intro-to-higher-order-functions</id>
    <content type="html"><![CDATA[<p>In University time, I was mainly acquainted to C/CPP programming with some Java. Then to me  <code>function</code> was something special and very different than other inhabitants of the my then programming world. In that time I couldn&rsquo;t even think of passing/returning functions to other functions.</p>

<p>Then sometime at the end of 2009, while I was learning Javascript I saw different behaviors and JS seemed more liberal to me. Like I could declare functions without name, could also assign them to variables, It was like wow to me. I read about anonymous functions and IIFE( Immediately-Invoked Function Expression ) and they amazed me back then. I first learned from Hasin Hayder while working in Leevio that I can assign name of a function to a variable  and call them like any other function and could even play with their scope with <code>apply</code> and <code>call</code> <code>Prototype</code> methods.</p>

<p> <!-- more --></p>

<p> Then anonymous function and closure kind of became normal to me while working with <code>PHP</code> and found I could even respond to undefined method calls in <code>PHP</code> Using <code>__call()</code> and <code>_callStatic()</code> <code>magic methods</code> . I didn&rsquo;t know that there&rsquo;s more surprise waiting for me.</p>

<p> While playing with <code>Scala</code> I found I can pass a function to another function and using that function argument that function can return new function with new behaviors. Like a generator function. It was amazing to me. I bet it might amaze you too if you are not already familiar with it.</p>

<p> These kind of functions are called <code>Higher Order Functions</code>, functions which takes other functions as argument works on them and may return new functions. Functions are <code>First Class Citizens</code> in functional languages. <strong>That means function are just like any other value. They can be passed/returned to/from other functions.</strong></p>

<p> Enough rambling. Lets define a higher order function in <code>Scala</code>.</p>

<p> We want to define a function to find the sum of the a range of values, sum of their squares and sum of their cubes. In any imperative language we would just create three functions and calculate the sum using a loop. We can do the same in <code>scala</code> using recursion and three different function. But we dont want to do that.</p>

<p>Lets see the higher order function definition first and then I will explain that.</p>

<figure class='code'><figcaption><span>Higher Order Function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">sum</span><span class="o">(</span><span class="n">f</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=&gt;</span> <span class="nc">Int</span><span class="o">)</span><span class="k">:</span> <span class="o">(</span><span class="kt">Int</span><span class="o">,</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Int</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">sumF</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span><span class="o">)</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">else</span> <span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="o">)</span> <span class="o">+</span> <span class="n">sumF</span><span class="o">(</span><span class="n">a</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span>
</span><span class='line'>    <span class="n">sumF</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The syntax can seem a bit odd to those not familiar with <code>scala</code> at all. The definition of the function tells that, the function <code>sum</code> takes another function as argument which is of signature <code>f: Int =&gt; Int</code> means that functions takes an integer and return an integer too. The part of the function definition after <code>:</code> which is <code>(Int, Int) =&gt; Int</code> tells the compiler that <code>sum</code> returns an function of type <code>(Int, Int) =&gt; Int</code> which means it takes two integers and return one as result.</p>

<p>Then we define another function inside the main <code>sum</code> function which is recursive version of a loop which runs from <code>a to b</code> which is our range and calculate the sum by passing each integer to the input function. Then at the last line of the definition we just have <code>sumF</code> which is the name of the function we declared inside. And If you dont already know scala return the result of last statement as return value of the functions and explicit return is not necessary which is the case in other functional languages too.</p>

<p>Now we can use this function to generate our desired functions like following,</p>

<figure class='code'><figcaption><span>Derived functions</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">sumInts</span>         <span class="k">=</span> <span class="n">sum</span><span class="o">(</span><span class="n">x</span> <span class="k">=&gt;</span> <span class="n">x</span><span class="o">)</span>
</span><span class='line'><span class="k">def</span> <span class="n">sumSquares</span>      <span class="k">=</span> <span class="n">sum</span><span class="o">(</span><span class="n">x</span> <span class="k">=&gt;</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span><span class="o">)</span>
</span><span class='line'><span class="k">def</span> <span class="n">sumCubes</span>        <span class="k">=</span> <span class="n">sum</span><span class="o">(</span><span class="n">x</span> <span class="k">=&gt;</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> x =&gt; x * x is just a syntactic sugar and  the short version of</span>
</span><span class='line'>
</span><span class='line'><span class="cm"> def square(x: Int): Int = {</span>
</span><span class='line'><span class="cm">    x * x</span>
</span><span class='line'><span class="cm"> }</span>
</span><span class='line'>
</span><span class='line'><span class="cm"> then we could just use</span>
</span><span class='line'><span class="cm"> def sumSquares  = sum(square)</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we are defining these functions by passing in an anonymous functions to the function <code>sum</code> . An anonymous function of the form <code>x =&gt; x * x</code> create an function which takes a single argument <code>x</code> and returns <code>x * x</code> which is the square of the argument.</p>

<p>Other than this we could also use the <code>factorial</code> function from <a href="http://joycse06.github.io/blog/2014/12/a-bite-of-functional-programming/">my last blog post</a> and declare a sum of factorials function like</p>

<figure class='code'><figcaption><span>Sum of factorials</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">sumFactorials</span> <span class="k">=</span> <span class="n">sum</span><span class="o">(</span><span class="n">factorial</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>and after these we can just use any of <code>sumInts(10, 20)</code> or <code>sumSquares(10 , 20)</code> etc to get the sum of the outputs of those functions.</p>

<p>These are very trivial things for any good functional programmer or any great programmer in general but the concept of this amazed me a lot. And I am really happy that I can do this now.</p>

<p>We could improve the declaration of our <code>sum</code> function to use <code>tail recursion</code> like I talked about in <a href="http://joycse06.github.io/blog/2014/12/a-bite-of-functional-programming/">my previous post</a>.</p>

<p>Maybe thats all from me for <code>scala</code> for the time being, I decided to learn <code>Clojure</code> instead and will be writing on that as I learn new cool things.</p>

<p>I am not a very good writer and not a very good programmer either. But I am trying to be good at both. You could always ask me things in comment and I will try my best to clarify things more if I can.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Bite of Functional Programming]]></title>
    <link href="http://joycse06.github.io/blog/2014/12/a-bite-of-functional-programming/"/>
    <updated>2014-12-15T03:25:02+11:00</updated>
    <id>http://joycse06.github.io/blog/2014/12/a-bite-of-functional-programming</id>
    <content type="html"><![CDATA[<p>I love programming languages and trying a new one is always fun. A year or so ago I first heard the name of functional paradigm of programming. I have came across blog posts, saw people talking about functional programming in programming communities over the last year. I have seen countless veteran programmers referring <code>SICP</code> as a must read for anyone who wants to be really good in programming. When I went over to search for <code>SICP</code> found the videos of original lecture of <code>Hal Abelson</code> and I heard the name of <code>LISP</code> from him while checking the first lecture.</p>

<p>From then on I have been cherishing a desire to learn a functional language and went ahead to try learning some like <code>Haskell</code>, <code>Clojure</code> and <code>Scala</code> though couldn&rsquo;t get too far with anyone of them. But after every few months something inside me pushes me to get back to learning a functional language well and I spend several days reading blogs, trying out simple things.</p>

<!-- more -->


<p>Enrolled in <code>Functional Programming in Scala</code> Course in <code>CourseEra</code> two times but couldn&rsquo;t or didn&rsquo;t finish in either of those enrolments. But while doing the exercise of first/second chapter of the scala course I did some trivial things like <code>finding factorial of a number</code> and <code>a parantheses matching program</code> which got me more interested into it.</p>

<p>Though I am a know-nothing in functional programming, I decided I will be good enough in one of the functional languages someday. But I have a habit of digressing from the main target sometimes specially while learning something and over this very short period of time I have checked blogs/videos on many things related to functional paradigm like <code>monads</code>, <code>monoids</code>,  <code>STM(Software Transactional Memory</code>, <code>Programming without side effects</code>, <code>Code as data</code>, <code>Higher Order functions</code> and many more. Though most of the things went over my head, I understood they are much profound ideas or concepts and understanding those properly will definitely make me a better programming.</p>

<p> Enough talking, lets do some trivial functional programming together maybe <code>finding the factorial of a number</code> . Lets do it in scala first.</p>

<figure class='code'><figcaption><span>factorial.scala</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">factorial</span><span class="o">(</span><span class="n">n</span><span class="k">:</span><span class="kt">Int</span><span class="o">)</span><span class="k">:</span><span class="kt">Int</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">n</span><span class="o">==</span><span class="mi">0</span><span class="o">)</span>
</span><span class='line'>        <span class="mi">1</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">*</span> <span class="n">factorial</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This program is fairly straight forward for anyone with basic programming background. The syntax can seem alien to anyone like me who doesn&rsquo;t know <code>Scala</code> but the functional body is pretty simple for anyone who knows <code>recursion</code> . We know factorial of a number is defined as <code>factorial(n) = n*(n-1)*....*1</code> . So in terms of recursion from <code>Imperative Paradigm</code> we see the base case is when value of <code>n</code> reaches <code>zero</code> we return one otherwise we call the same function recursively.</p>

<p>so the call stack for a call of <code>factorial(5)</code> would look like</p>

<figure class='code'><figcaption><span>factorial.scala</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">factorial</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span>
</span><span class='line'><span class="mi">5</span><span class="o">*(</span><span class="n">factorial</span><span class="o">(</span><span class="mi">4</span><span class="o">))</span>
</span><span class='line'><span class="mi">5</span><span class="o">*(</span><span class="mi">4</span><span class="o">*(</span><span class="n">factorial</span><span class="o">(</span><span class="mi">3</span><span class="o">)))</span>
</span><span class='line'><span class="mi">5</span><span class="o">*(</span><span class="mi">4</span><span class="o">*(</span><span class="mi">3</span><span class="o">*(</span><span class="n">factorial</span><span class="o">(</span><span class="mi">2</span><span class="o">))))</span>
</span><span class='line'><span class="mi">5</span><span class="o">*(</span><span class="mi">4</span><span class="o">*(</span><span class="mi">3</span><span class="o">*(</span><span class="mi">2</span><span class="o">*(</span><span class="n">factorial</span><span class="o">(</span><span class="mi">1</span><span class="o">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We see with each call we get more and more <code>*'s</code> and all steps stacks up in the call stack in memory which definitely have a limited amount of space. So if the number we want to calculate the factorial for is big enough we can get good old <code>Stack Overflow Error</code>. So whats the solution to this. Most good languages has a features called <code>Tail Recursion Optimization</code> which is, if the  <code>recursive</code> call is of the same form as the main function call then the compiler/interpreter will resuse the same call stack instead of creating a new one each time.</p>

<p>But we cant just make the last call <code>factorial(n-1)</code> in that case we will lose the number n. So to make it tail recursive we can redefine the function like</p>

<figure class='code'><figcaption><span>factorial</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">factorial</span><span class="o">(</span><span class="n">n</span><span class="k">:</span><span class="kt">Int</span><span class="o">,</span> <span class="n">accumulator</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span> <span class="n">n</span><span class="o">==</span><span class="mi">0</span> <span class="o">)</span>
</span><span class='line'>        <span class="n">accumulator</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">factorial</span><span class="o">((</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">),</span> <span class="n">n</span><span class="o">*</span><span class="n">accumulator</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the last recursive call is of the same function signature and scala interpreter is design to optimize it with the feature called <code>Tail Recursion Optimization</code> . But this one also has one limitation, it requires the user of the function to pass 1 as the value of the <code>accumulator</code> which is a burden for the user and it wont return correct result if the user doesn&rsquo;t provide 1 as the value of the <code>accumulator</code> . To avoid this and provide user the same function signature like <code>factorial(number)</code> we can use a local function inside the main function. Such a function definition will look like</p>

<figure class='code'><figcaption><span>factorial</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">factorial</span><span class="o">(</span><span class="n">number</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">factorialWithAccumulator</span><span class="o">(</span> <span class="n">number</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">accumulator</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">number</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">accumulator</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="n">factorialWithAccumulator</span><span class="o">(</span> <span class="n">number</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">accumulator</span> <span class="o">*</span> <span class="n">number</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">factorialWithAccumulator</span><span class="o">(</span><span class="n">number</span><span class="o">,</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now this function can be called like  <code>factorial(5)</code> and we can use it to calculate factorial of much bigger number as it&rsquo;s optimized we wont get  <code>Stack Overflow</code> error. Another thing we can do is to use the  <code>@tailrec</code> annotation before any function you expect the compiler to optimize and in that case the compiler will warn you if it cant optimize that recursive function.</p>

<p>That&rsquo;s all for today. I will be writing more about functional programming as I learn more about it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving Magento Store From One Server to Another Easily Using Ssh]]></title>
    <link href="http://joycse06.github.io/blog/2014/12/moving-magento-from-one-server-to-another-easily-using-ssh/"/>
    <updated>2014-12-11T00:40:11+11:00</updated>
    <id>http://joycse06.github.io/blog/2014/12/moving-magento-from-one-server-to-another-easily-using-ssh</id>
    <content type="html"><![CDATA[<p>When I first started working with Magento I thought moving a magento installation with lots of data from one server to another wont be easy considering the db size is very big and the codebase is not small either.</p>

<p>I was a noob at linux server&rsquo;s stuff then, I am not good at all now, but I have become better than before. And after moving several Magento installations around, creating development sandboxes from live data with large databases like 4GB+ I do think with some terminal kungfu you can pretty easily move magento from one  server to another. The method I will show will required <code>ssh</code> access to both servers.</p>

<!-- more -->


<p>I will walk you through step by step,</p>

<h2>Exporting the current Magento Database</h2>

<p>To export the current database magento is using, first <code>ssh</code> into the server and then find the database config from magento config file located at <code>app/etc/local.xml</code> . In that file you will see a connection node like following</p>

<figure class='code'><figcaption><span>app/etc/local.xml&#8220;`</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;connection&gt;</span>
</span><span class='line'>      <span class="nt">&lt;host&gt;</span><span class="cp">&lt;![CDATA[localhost]]&gt;</span><span class="nt">&lt;/host&gt;</span>
</span><span class='line'>      <span class="nt">&lt;username&gt;</span><span class="cp">&lt;![CDATA[username]]&gt;</span><span class="nt">&lt;/username&gt;</span>
</span><span class='line'>      <span class="nt">&lt;password&gt;</span><span class="cp">&lt;![CDATA[password]]&gt;</span><span class="nt">&lt;/password&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dbname&gt;</span><span class="cp">&lt;![CDATA[dbname]]&gt;</span><span class="nt">&lt;/dbname&gt;</span>
</span><span class='line'>      <span class="nt">&lt;initStatements&gt;</span><span class="cp">&lt;![CDATA[SET NAMES utf8]]&gt;</span><span class="nt">&lt;/initStatements&gt;</span>
</span><span class='line'>      <span class="nt">&lt;model&gt;</span><span class="cp">&lt;![CDATA[mysql4]]&gt;</span><span class="nt">&lt;/model&gt;</span>
</span><span class='line'>      <span class="nt">&lt;type&gt;</span><span class="cp">&lt;![CDATA[pdo_mysql]]&gt;</span><span class="nt">&lt;/type&gt;</span>
</span><span class='line'>      <span class="nt">&lt;pdoType&gt;</span><span class="cp">&lt;![CDATA[]]&gt;</span><span class="nt">&lt;/pdoType&gt;</span>
</span><span class='line'>      <span class="nt">&lt;active&gt;</span>1<span class="nt">&lt;/active&gt;</span>
</span><span class='line'><span class="nt">&lt;/connection&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So you have DB access to export the database magento is using. You can use <code>mysqldump</code> to dump the database using the following command:</p>

<figure class='code'><figcaption><span>mysqldump</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mysqldump -h DB_HOST -u DB_USER -p DB_NAME &gt; EXPORT_FILENAME.sql
</span></code></pre></td></tr></table></div></figure>


<p>It will prompt you for password and after you provide that it will start dumping the database into the file you specified. It can take time depending on the amount of data you have in your magento store. Like in my case it took quite some time to export a database of size around 4GB. Once done, you will get a uncompressed sql file whose size can be reduced easily. As it&rsquo;s a text file it&rsquo;s compression ratio will be good and you should get a file much smaller in size. You can compress it using <code>tar</code></p>

<figure class='code'><figcaption><span>tar</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tar -czf  EXPORT_FILENAME.sql.tar.gz EXPORT_FILENAME.sql
</span></code></pre></td></tr></table></div></figure>


<h2>Moving the database into the new server</h2>

<p>If it&rsquo;s a very big dump then you should be using <code>scp</code> (Secure Copy over ssh) to save yourself time. That would reduce the step of downloading it in your local machine first and then re upload into the new server. If you have <code>ssh</code> access of the new server then you should definitely try to use <code>scp</code> . For that login into the old server where you have the exported database dump then run a command like</p>

<figure class='code'><figcaption><span>scp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> scp -P SSH_PORT /PATH/TO/EXPORT_FILENAME.sql.gz username@NEW_SERVER_IP:/NEW/SERVER/PATH/
</span></code></pre></td></tr></table></div></figure>


<p>It will copy the database over to the new server in no time, in server&rsquo;s internet speed which is high in most cases.</p>

<p>You can copy the magento codebase the same way over to the new server.</p>

<h2>Importing the database into the new server</h2>

<p>First <code>untar</code> the copied database into it&rsquo;s original <code>.sql</code> format. Use the following command,</p>

<figure class='code'><figcaption><span>untar</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tar -xzf EXPORT_FILENAME.sql.tar.gz
</span></code></pre></td></tr></table></div></figure>


<p>After this step you will have a file named <code>EXPORT_FILENAME</code> in the current directory you are in.</p>

<p>Create a new database in the new server either from command line using <code>mysql cli</code> or from <code>cpanel</code> or any kind of database administration tool and then <code>ssh</code> into the new server. Then you can import the copied database dump into the newly created database using the following command,</p>

<figure class='code'><figcaption><span>mysql import</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mysql -u DB_USER -p DB_NAME &lt; EXPORT_FILENAME.sql
</span></code></pre></td></tr></table></div></figure>


<p>It will ask for password, will take some time and eventually import the database into the new server.</p>

<h2>Updating Database config in Code and base url in database</h2>

<p>Like I said copy over the magento codebase the say way with <code>scp</code> or in any other way you want. Now update the database config in <code>app/etc/local.xml</code> file.</p>

<p>You also have to update the <code>base_url</code> in <code>core_config_data</code> table of magento which it uses internally to render links throughout the site. Load the <code>core_config_data</code> table into any database browser like <code>Sequel Pro</code> or <code>PHPMyAdmin</code> . You will see that table has a column named <code>path</code> . Search for path values of <code>web/unsecure/base_url</code> and <code>web/secure/base_url</code> and replace the value which is of the old site with the new web root of your magento installation you copied a while ago.</p>

<p>As you may have guessed from the path names <code>secure</code> and <code>unsecure</code> <code>base_url</code> means what they should mean and they are the <code>http</code> and <code>https</code> urls of your new magento home.</p>

<p>You can now load the new url in browser and it should load the new site. If it doesn&rsquo;t then you might have to clear the cache of the site. The <code>cache</code> directory is in <code>app/var/cache</code> . Remove the contents of that directory and you should be done. You could remove the contents of that directory from command line using the following command too</p>

<figure class='code'><figcaption><span>rm</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rm -rf ./app/var/cache/*
</span></code></pre></td></tr></table></div></figure>


<p>If you still face any problem in loading the new site then you should try to debug the specific problem you are having. Thats all for today. Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Looking for Occurrences of a String in All Files Under a Directory Using Grep]]></title>
    <link href="http://joycse06.github.io/blog/2014/12/looking-for-occurrences-of-a-string-in-all-files-under-a-directory-using-grep/"/>
    <updated>2014-12-10T20:52:18+11:00</updated>
    <id>http://joycse06.github.io/blog/2014/12/looking-for-occurrences-of-a-string-in-all-files-under-a-directory-using-grep</id>
    <content type="html"><![CDATA[<p> <code>grep</code> is a very simple command available on linux and OSX terminals which can do amazing things and can save a lot fo time. I was working on a Magento site this morning and on the checkout page I found the telephone field was using <code>&lt;input type="Number" ...</code> while it should use <code>&lt;input type="text" ...</code> or else phone number with dashes in them wont validate and customers wont be able to proceed with next step.</p>

<p>I was thinking of how can I find the file which have this code, those who of you are familiar with Magento knows that magento has a very organized file structure and hierarchies of templates, and different templates gets loaded based on active theme and layout xml files. So I have to find out all the occurrences of <code>&lt;input type="number" ...</code> in the whole installation.</p>

<p>I knew I can use <code>grep</code> to do this. I instantly looked at the man page of <code>grep</code> and reviewed the available options and got what I needed.</p>

<p>The final command I wrote on the server&rsquo;s terminal was</p>

<figure class='code'><figcaption><span>Grep</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>grep -R -i -n <span class="s1">&#39;type=&quot;number&quot;&#39;</span> public_html/app
</span></code></pre></td></tr></table></div></figure>


<p> <code>-R</code> tells <code>grep</code> to search recursively into that directory, <code>-i</code> is for <code>ignore-case</code> and <code>-n</code> finds and outputs the line number along with file name too. As soon as I ran that command it searched the whole <code>app</code> directory and came back with all the place where <code>type="number"</code> occurred with line number too. Then I just edited those files and the issue was fixed.</p>

<p> What took me several minutes would have taken hours to search and find those files manually. Thats one of many benefits of using command line. And you can do pretty amazing things using/combining only a handful of commands.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taking a Magento Site Into Maintenance Mode for Everyone Except You]]></title>
    <link href="http://joycse06.github.io/blog/2014/12/taking-a-magento-site-into-maintenance-mode-for-everyone-except-you/"/>
    <updated>2014-12-10T18:54:25+11:00</updated>
    <id>http://joycse06.github.io/blog/2014/12/taking-a-magento-site-into-maintenance-mode-for-everyone-except-you</id>
    <content type="html"><![CDATA[<p>Magento takes a dead simple approach for activating the maintanence mode for any site using it. You just get into servers&rsquo;s terminal via <code>ssh</code> , <code>cd</code> into the magento root folder and run the following command <code>touch maintenance.flag</code> or just crate a file named <code>maintenance.flag</code> in the root of the your magento installation and voila, you will see the maintenance mode message when you visit your store now.</p>

<p>Now Its locked for everyone, but say you are updating somethings on the site and you would like to check how thats affecting the look of the store but you dont want anyone to view it before getting done. Fortunately thas easy too.</p>

<!-- more -->


<p>If you look into the <code>index.php</code> at your magento root folder you will see a code block like below</p>

<figure class='code'><figcaption><span>index.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$maintenanceFile</span> <span class="o">=</span> <span class="s1">&#39;maintenance.flag&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">file_exists</span><span class="p">(</span><span class="nv">$maintenanceFile</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">include_once</span> <span class="nb">dirname</span><span class="p">(</span><span class="k">__FILE__</span><span class="p">)</span> <span class="o">.</span> <span class="s1">&#39;/errors/503.php&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">exit</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I guess you understand what it does from the look of it, it just checks if the  <code>maintenance.flag</code> file and if it exists it include the <code>errors/503.php</code> file which contains the maintenance mode message. On a side note you can edit that file to change the message or to add some styling.</p>

<p>Now we want it to stay same for other but to allow us to view the site. How can you determine the request came from your machine in that script? Well you might already know, you have a public identifier which is your <code>PUBLIC IP</code> , and by using that you can bypass that check and view the site.</p>

<p>To make the solution a more robust we will use an array of IPs so you can whitelist more peoples like maybe your co-worker, or your QA or your boss. First we create an array like this, <code>$allowed = array('27.147.178.86','27.147.185.185');</code> , you can add as many IPs as you want in that array and each one of those owners will be able to view the store while it&rsquo;s still in maintenance mode. Now to get the IP of a Specific HTTP request you can go around the easier way with something like
  <code>$ip = $_SERVER['REMOTE_ADDR'];</code> But keep in mind that might not always work like when user is using behind a proxy server. Search in google for a better way to find the IP address using PHP.</p>

<p>We are almost done, just append <code>&amp;&amp; !in_array($ip, $allowed)</code> in the condition of <code>if</code> and you are done. The function <code>in_array</code> checks if the first argument is present in the array passed int he second argument and return true if found, we are negating the output of the function, because we want that part of the condition to return false and proceed with the code execution if the request came from one of the specified IPs.</p>

<p>Thats all you need. I am adding the complete code below.</p>

<figure class='code'><figcaption><span>index.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$ip</span> <span class="o">=</span> <span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">&#39;REMOTE_ADDR&#39;</span><span class="p">];</span>
</span><span class='line'><span class="nv">$allowed</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;27.147.178.84&#39;</span><span class="p">,</span><span class="s1">&#39;27.147.180.185&#39;</span><span class="p">,</span><span class="s1">&#39;96.240.89.118&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">file_exists</span><span class="p">(</span><span class="nv">$maintenanceFile</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nb">in_array</span><span class="p">(</span><span class="nv">$ip</span><span class="p">,</span> <span class="nv">$allowed</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">include_once</span> <span class="nb">dirname</span><span class="p">(</span><span class="k">__FILE__</span><span class="p">)</span> <span class="o">.</span> <span class="s1">&#39;/errors/503.php&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">exit</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Highlight the Search Term in Results in an Android App]]></title>
    <link href="http://joycse06.github.io/blog/2014/12/how-to-highlight-the-search-term-in-results-in-an-android-app/"/>
    <updated>2014-12-09T00:40:11+11:00</updated>
    <id>http://joycse06.github.io/blog/2014/12/how-to-highlight-the-search-term-in-results-in-an-android-app</id>
    <content type="html"><![CDATA[<p>Few months ago I created an Android app <a href="https://play.google.com/store/apps/details?id=quantum.org.quran">Al-Quran Bangla Mormobani</a> in several days with a quick deadline, so couldn&rsquo;t add much features to it. One such feature was the search terms were not highlighted in the results view so users couldn&rsquo;t use it effectively for reference. I got several requests from the users asking for this features. Few days ago I had couple of hours free to look into it and after searching for a while found a solution.</p>

<!-- more -->


<p>The data was coming from an Sqlite database and I am using a listview to present the results. As the adapter of the <code>ListView</code> I am using a <code>SimpleCursorAdapter</code> . Now to decorate specific terms in the <code>ListViewItems</code> I am using a <code>viewBinder</code> . The code is as follows,</p>

<figure class='code'><figcaption><span>ViewBinder</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">adapter</span><span class="o">.</span><span class="na">setViewBinder</span><span class="o">(</span><span class="k">new</span> <span class="n">SimpleCursorAdapter</span><span class="o">.</span><span class="na">ViewBinder</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>       <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">setViewValue</span><span class="o">(</span><span class="n">View</span> <span class="n">view</span><span class="o">,</span> <span class="n">Cursor</span> <span class="n">cursor</span><span class="o">,</span> <span class="kt">int</span> <span class="n">columnIndex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>           <span class="k">if</span> <span class="o">(</span><span class="n">view</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">==</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">favorite_bangla_description</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">String</span> <span class="n">description</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="n">cursor</span><span class="o">.</span><span class="na">getColumnIndex</span><span class="o">(</span><span class="s">&quot;bangla_description&quot;</span><span class="o">));</span>
</span><span class='line'>               <span class="kt">int</span> <span class="n">startPos</span> <span class="o">=</span> <span class="n">description</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="n">query</span><span class="o">);</span>
</span><span class='line'>               <span class="kt">int</span> <span class="n">endPos</span> <span class="o">=</span> <span class="n">description</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">,</span> <span class="n">startPos</span><span class="o">);</span>
</span><span class='line'>               <span class="k">if</span> <span class="o">(</span><span class="n">startPos</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="c1">// This should always be true, just a sanity check</span>
</span><span class='line'>               <span class="o">{</span>
</span><span class='line'>                   <span class="n">Spannable</span> <span class="n">spannable</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SpannableString</span><span class="o">(</span><span class="n">description</span><span class="o">);</span>
</span><span class='line'>                   <span class="n">ColorStateList</span> <span class="n">blueColor</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ColorStateList</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[][]</span> <span class="o">{</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{}},</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span> <span class="n">Color</span><span class="o">.</span><span class="na">BLUE</span> <span class="o">});</span>
</span><span class='line'>                   <span class="n">TextAppearanceSpan</span> <span class="n">highlightSpan</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">TextAppearanceSpan</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="n">Typeface</span><span class="o">.</span><span class="na">BOLD</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">blueColor</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>                   <span class="n">spannable</span><span class="o">.</span><span class="na">setSpan</span><span class="o">(</span><span class="n">highlightSpan</span><span class="o">,</span> <span class="n">startPos</span><span class="o">,</span> <span class="n">endPos</span><span class="o">,</span> <span class="n">Spannable</span><span class="o">.</span><span class="na">SPAN_EXCLUSIVE_EXCLUSIVE</span><span class="o">);</span>
</span><span class='line'>                   <span class="o">((</span><span class="n">TextView</span><span class="o">)</span> <span class="n">view</span><span class="o">).</span><span class="na">setText</span><span class="o">(</span><span class="n">spannable</span><span class="o">);</span>
</span><span class='line'>               <span class="o">}</span>
</span><span class='line'>               <span class="k">else</span>
</span><span class='line'>                   <span class="o">((</span><span class="n">TextView</span><span class="o">)</span> <span class="n">view</span><span class="o">).</span><span class="na">setText</span><span class="o">(</span><span class="n">description</span><span class="o">);</span>
</span><span class='line'>               <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>           <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>I am not in a mood to explain the nitty gritty of the whole code above in this post, but the main part which is doing the highlighting is the use of <code>Spannable</code> String. Or more precisely the following code,</p>

<figure class='code'><figcaption><span>Highlighting Text</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Spannable</span> <span class="n">spannable</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SpannableString</span><span class="o">(</span><span class="n">description</span><span class="o">);</span>
</span><span class='line'><span class="n">ColorStateList</span> <span class="n">blueColor</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ColorStateList</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[][]</span> <span class="o">{</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{}},</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span> <span class="n">Color</span><span class="o">.</span><span class="na">BLUE</span> <span class="o">});</span>
</span><span class='line'><span class="n">TextAppearanceSpan</span> <span class="n">highlightSpan</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">TextAppearanceSpan</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="n">Typeface</span><span class="o">.</span><span class="na">BOLD</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">blueColor</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="n">spannable</span><span class="o">.</span><span class="na">setSpan</span><span class="o">(</span><span class="n">highlightSpan</span><span class="o">,</span> <span class="n">startPos</span><span class="o">,</span> <span class="n">endPos</span><span class="o">,</span> <span class="n">Spannable</span><span class="o">.</span><span class="na">SPAN_EXCLUSIVE_EXCLUSIVE</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s creating a highlight span, setting its color as <code>blue</code> and then setting that as a span of the original <code>Spannable</code> String using the start and end pos of the query string&rsquo;s occurence in the original string. And the result is a very good highlighted word.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a Very Simple Artisan Startover Command in Laravel]]></title>
    <link href="http://joycse06.github.io/blog/2014/12/creating-a-very-simple-artisan-startover-command-in-laravel/"/>
    <updated>2014-12-08T18:40:12+11:00</updated>
    <id>http://joycse06.github.io/blog/2014/12/creating-a-very-simple-artisan-startover-command-in-laravel</id>
    <content type="html"><![CDATA[<p>While working on a recent project using Laravel I felt the need for a quick startover command, as we were brainstorming with <code>domain</code> objects and <code>businees logic</code> our migrations were changing frequently. So after each pull/change in migration I needed to reset the migrations, remigrate, seed database with updated seeder classes.</p>

<p>So I looked into creating a simple artisan command. The command is fairly straight forward, I am including the code for the command below.</p>

<!-- more -->




<figure class='code'><figcaption><span>StartOverCommand.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Illuminate\Console\Command</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Console\Input\InputOption</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Console\Input\InputArgument</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">StartOverCommand</span> <span class="k">extends</span> <span class="nx">Command</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/**</span>
</span><span class='line'><span class="sd">  * The console command name.</span>
</span><span class='line'><span class="sd">  *</span>
</span><span class='line'><span class="sd">  * @var string</span>
</span><span class='line'><span class="sd">  */</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$name</span> <span class="o">=</span> <span class="s1">&#39;appname:startover&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/**</span>
</span><span class='line'><span class="sd">  * The console command description.</span>
</span><span class='line'><span class="sd">  *</span>
</span><span class='line'><span class="sd">  * @var string</span>
</span><span class='line'><span class="sd">  */</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$description</span> <span class="o">=</span> <span class="s1">&#39;Reset Migration, remigrate, seed and Start Over&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/**</span>
</span><span class='line'><span class="sd">  * Execute the console command.</span>
</span><span class='line'><span class="sd">  *</span>
</span><span class='line'><span class="sd">  * @return mixed</span>
</span><span class='line'><span class="sd">  */</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">fire</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">info</span><span class="p">(</span><span class="s2">&quot;Resetting the Migration.....&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">call</span><span class="p">(</span><span class="s1">&#39;migrate:reset&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">info</span><span class="p">(</span><span class="s2">&quot;Recreating schemas....&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">call</span><span class="p">(</span><span class="s1">&#39;migrate&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">info</span><span class="p">(</span><span class="s1">&#39;Seeding data.....&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">call</span><span class="p">(</span><span class="s1">&#39;db:seed&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Only the relevant parts of the file is included here. BTW, you can create a boiler plate command using the <code>php artisan command:make StartOverCommand</code> command from terminal.</p>

<p>the name you set above will be the actual command, I have set it like <code>appname:startover</code> Its always a good practice to namespace things whenever possible.</p>

<p>Then the method that gets fired when the command is exectuted from terminal is <code>fire()</code> method. It does the same things I stated above which I did manually earlier.</p>

<p>After you add this file in <code>app/commands/</code> directory of your <code>laravel</code> installation, you have to add the command by adding the line  <code>Artisan::add(new StartOverCommand);</code> on your <code>app/start/artisan.php</code> file.</p>

<p>After all the above steps are done you can use it like <code>php artisan appname:startover</code>  and it will reset migration, migrate migrations and then seed the tables.</p>

<p>Thanks for bearing with me. Hope you enjoyed it!</p>

<p><a href="https://gist.github.com/joycse06/c03da3aaa31e416cfb0f">Complete command file code</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Revisting Data Structure : Linked List Part 2]]></title>
    <link href="http://joycse06.github.io/blog/2014/12/revisting-data-structure-linked-list-part-2/"/>
    <updated>2014-12-08T14:57:17+11:00</updated>
    <id>http://joycse06.github.io/blog/2014/12/revisting-data-structure-linked-list-part-2</id>
    <content type="html"><![CDATA[<p> In previous part of the series We talked about Linked List in General and it&rsquo;s implementation details in C++ Programming language. We saw how to layout the structure of a Linked List and how to insert data into the list.</p>

<p> In this episode we will be talking about how we can print all the nodes of a linked list. So we can assume from the nature of Linked list that we have to traverse the whole list and print each nodes value.</p>

<h2>Printing Linked List through Iteration Method</h2>

<p> The definition of the print function using iteration is as follows:</p>

<figure class='code'><figcaption><span>printList function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'> <span class="kt">void</span> <span class="nf">printList</span><span class="p">(</span><span class="k">struct</span> <span class="n">Node</span><span class="o">*</span> <span class="n">head</span><span class="p">){</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Node</span><span class="o">*</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">List is: &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">temp</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// exit condition</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot; %d&quot;</span><span class="p">,</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span> <span class="c1">// Print the value of the Current Node</span>
</span><span class='line'>        <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>        <span class="c1">// Proceed to the next Node</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>The definition of the function is fairly straight forward. We take <code>head</code> of the list as argument and then using a while loop we traverse through the List and print the value at each node.</p>

<p>Lets see how can we achieve the same using Recursion.</p>

<h2>Printing Linked List through Recursion</h2>

<p>We know when we use recursion in a function there must be two cases</p>

<ol>
<li><p>Base case or exit condition: If we dont define a exit condition while using recursion, then the recursion won&rsquo;t stop and the function call stack will overflow eventually terminating the program at some point.</p></li>
<li><p>Recursive case : for all other general case we can call the same method recursively.</p></li>
</ol>


<figure class='code'><figcaption><span>printListRecursive function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="nf">printListRecursive</span><span class="p">(</span><span class="k">struct</span> <span class="n">Node</span><span class="o">*</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">p</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span> <span class="c1">// exit condition</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d &quot;</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>  <span class="c1">// Print the value</span>
</span><span class='line'>    <span class="n">printListRecursive</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span> <span class="c1">// Recursive call</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Recursion is a very powerful tool, but you have to be careful while designing it. Great Power comes with Great Responsibilities, it&rsquo;s very true for recursion too.</p>

<p>What happens in this recursive version is we check if the pointer argument <code>p</code> is null, if it is NULL then we return from the function. If it&rsquo;s not that means we are not at the end of the list, then we print the data of current node and call the same function recursively.</p>

<p> How recursion works internally requires knowledge of Function call stack which calls for another blog post, I will try to write a blog post on the simulation of recursion in memory.</p>

<p> Thats all for today. We will talk about delete nodes from list and reversing a link list in next episodes. Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Revisting Data Structure : Linked List Part 1]]></title>
    <link href="http://joycse06.github.io/blog/2014/12/revisting-data-structure-linked-list-part-1/"/>
    <updated>2014-12-07T13:27:38+11:00</updated>
    <id>http://joycse06.github.io/blog/2014/12/revisting-data-structure-linked-list-part-1</id>
    <content type="html"><![CDATA[<p>Linked List is a very important data structure in terms of the concepts required to understand it&rsquo;s inner working and the operation that can be performed on it.</p>

<p>In this post we will be exploring structure of Linked List and operations that can be performed on Linked list.</p>

<p>So without further ado lets dive into the details.</p>

<!-- more -->


<p>For the sake of simplicity our linked list will be holding only a integer and an next link filed. We will be using a structure to accomplish this.</p>

<figure class='code'><figcaption><span>Linked List Structure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">struct</span> <span class="n">Node</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Node</span><span class="o">*</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So it&rsquo;s a simple structure which only has a int member and a next pointer of the same struct type to hold the address of the next item in the linked list.</p>

<p>As we have the template ready now, how can we create an instance of the structure? It&rsquo;s simple we can either use C style <code>malloc()</code> or CPP style <code>new</code> operator. We will use malloc for this post. So creating an instance of structure is like</p>

<figure class='code'><figcaption><span>Malloc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">struct</span> <span class="n">Node</span><span class="o">*</span> <span class="n">temp</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">Node</span><span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">Node</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this line what we are doing is declaring and defining an pointer of type struct Node and dynamically allocating memory for it using malloc. <code>Malloc</code> takes the size of the data type, allocate that amount of memory dynamically at runtime in the heap( Head is the free memory from where every application can request memory from Operating system using function calls).</p>

<p>after this we can use this instance instance with pointer dereferencing or using the pointer operator like follows:</p>

<figure class='code'><figcaption><span>accessing properties of the instance of struct</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="p">(</span><span class="o">*</span><span class="n">temp</span><span class="p">).</span><span class="n">data</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="c1">// or we can simple use</span>
</span><span class='line'><span class="n">temp</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Inserting data into Linked list</h1>

<p>Data can be inserted at different points of the linked list like at the</p>

<ul>
<li>at the start of the List</li>
<li>at the end of the List</li>
<li>at nth position</li>
</ul>


<h2>Insertion at the front of the list</h2>

<p>Lets write a function which takes the head of the list and an integer and inserts that number at the front of the list. An example implementation is follows</p>

<figure class='code'><figcaption><span>InsertAtFront Function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">struct</span> <span class="n">Node</span><span class="o">*</span> <span class="nf">InsertAtFront</span><span class="p">(</span><span class="k">struct</span> <span class="n">Node</span><span class="o">*</span> <span class="n">head</span><span class="p">,</span> <span class="kt">int</span> <span class="n">data</span><span class="p">){</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span> <span class="n">temp</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span> <span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">Node</span><span class="p">));</span>
</span><span class='line'>  <span class="p">(</span><span class="o">*</span><span class="n">temp</span><span class="p">).</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span> <span class="c1">// or temp-&gt;data = x;</span>
</span><span class='line'>  <span class="p">(</span><span class="o">*</span><span class="n">temp</span><span class="p">).</span><span class="n">next</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span> <span class="c1">// or temp-&gt;next = head;</span>
</span><span class='line'>    <span class="n">head</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">head</span><span class="p">;</span> <span class="c1">// Return the new head</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The function is pretty straight forward. We create a new node, add the data, point it the current head, change head to point to the new node and return the new head.</p>

<h2>Inserting at the end of the list</h2>

<p>Insert at the end function will look like</p>

<figure class='code'><figcaption><span>InsertAtEnd function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">struct</span> <span class="n">Node</span><span class="o">*</span> <span class="nf">InsertAtEnd</span><span class="p">(</span><span class="k">struct</span> <span class="n">Node</span><span class="o">*</span> <span class="n">head</span><span class="p">,</span> <span class="kt">int</span> <span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">node</span><span class="o">*</span> <span class="n">temp</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span> <span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">Node</span><span class="p">));</span>
</span><span class='line'>    <span class="n">temp</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>    <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">head</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>        <span class="c1">// the List is empty</span>
</span><span class='line'>        <span class="n">head</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">Node</span><span class="o">*</span> <span class="n">last</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="n">last</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>            <span class="n">last</span> <span class="o">=</span> <span class="n">last</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>        <span class="n">last</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this function we first create a new node with the data and next pointer as NULL; Then we check if the list is currently empty we just make this new node the head of the list.</p>

<p>If the list is not empty we have first traverse the list to go to the last element of the list and then just add the newly created node in the next link of the last element;</p>

<h2>Inserting at the Nth Position in the list</h2>

<p>for the sake of simplicity we will assume that the position argument will always be within the list and wont do out of bounds handling in this version.</p>

<figure class='code'><figcaption><span>InsertAtNthPosition function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">struct</span> <span class="n">Node</span><span class="o">*</span> <span class="nf">InsertAtNthPosition</span><span class="p">(</span><span class="k">struct</span> <span class="n">Node</span><span class="o">*</span> <span class="n">head</span><span class="p">,</span> <span class="kt">int</span> <span class="n">data</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">// Lets do it CPP style this time</span>
</span><span class='line'>    <span class="n">Node</span><span class="o">*</span> <span class="n">temp1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">();</span>
</span><span class='line'>    <span class="n">temp1</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>    <span class="n">temp1</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">pos</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">temp1</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'>        <span class="n">head</span> <span class="o">=</span> <span class="n">temp1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Node</span><span class="o">*</span> <span class="n">temp2</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span> <span class="kt">int</span> <span class="n">iter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">iter</span> <span class="o">&lt;</span> <span class="n">pos</span> <span class="o">-</span> <span class="mi">2</span><span class="p">;</span> <span class="n">iter</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">temp2</span> <span class="o">=</span> <span class="n">temp2</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">temp1</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">temp2</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>        <span class="n">temp2</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">temp1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thats all for today. We will be talking about other operations on linked list like printing, deleting etc in future posts. Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Unix Tar Pipe : Lots of Unix Knowledge in a Simple One Liner]]></title>
    <link href="http://joycse06.github.io/blog/2014/12/the-unix-tar-pipe-lots-of-unix-knowledge-in-a-simple-one-liner/"/>
    <updated>2014-12-06T19:22:15+11:00</updated>
    <id>http://joycse06.github.io/blog/2014/12/the-unix-tar-pipe-lots-of-unix-knowledge-in-a-simple-one-liner</id>
    <content type="html"><![CDATA[<p>I have recently been introduced to the Tar Pipe. It&rsquo;s not a command to run in the shell but a pattern which I liked very much.</p>

<p>It uses some primitive unix command and couple features of the shell to solve a problem. Let me talk a bit about the problem it solves. Suppose you have a directory called src and you want to clone it to a destination folder named dst preserving metadata like owners, groups and permissions of files and directories. In modern systems there are command like</p>

<figure class='code'><figcaption><span>Copy Command</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cp -rp
</span><span class='line'>
</span><span class='line'><span class="c"># or</span>
</span><span class='line'>
</span><span class='line'>rsync -a
</span></code></pre></td></tr></table></div></figure>


<p> using which you can clone contents of one directory to another preserving permissions and other metadata easily. But in the days when rsync -a was not there or the cp implementation didn&rsquo;t have the permissions preserving flag there was a tar pipe which did the same thing using unix tar command. The Tar Pipe looks like this</p>

<figure class='code'><figcaption><span>Tar Pipe</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> <span class="o">(</span><span class="nb">cd </span>src <span class="o">&amp;&amp;</span> tar -c .<span class="o">)</span> <span class="p">|</span> <span class="o">(</span><span class="nb">cd </span>dst <span class="o">&amp;&amp;</span> tar -xp<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>So why I liked a command very much considering its obsolete now. The reason is if we look closely there&rsquo;s lot of Unixy stuff in this one line.</p>

<p>Looking from the outside we see two subshells [ (cd src &amp;&amp; tar -c .) and (cd dst &amp;&amp; tar -xp) ] joined by the pipe. A subshell basically tells bash or zsh to fork itself the execute the code inside the parantheses in a new process. And this actuallly isotates the subshell&rsquo;s current working directory, its variables and other options.</p>

<p>So the left part of the Tar pipe change the directory into src and tar the contents of that directory and output the stream into standard output. And on the other side of the pipe we have a blocking process with is waiting to be feed from the left side.</p>

<p>When the left side starts outputting, the right side change current directory into dst and starts reading from the other side of the pipe and untar it preserving permissions.</p>

<p> On either side &amp;&amp;  ensures that if the directory doesn&rsquo;t exist tar command on the right won&rsquo;t fire at all.</p>

<p> That all for today. I will be talking more about fork and tar in another post. Hope you enjoyed it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seeding Data in Laravel Using Faker Maintaining Foreign Key Relationship]]></title>
    <link href="http://joycse06.github.io/blog/2014/11/seeding-data-in-laravel-using-faker-maintaining-foreign-key-relationship/"/>
    <updated>2014-11-08T17:42:32+11:00</updated>
    <id>http://joycse06.github.io/blog/2014/11/seeding-data-in-laravel-using-faker-maintaining-foreign-key-relationship</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/fzaninotto/Faker">Faker</a> is a great composer package for generating random data which can be used for seeding database tables for testing purposes in Laravel and other frameworks.</p>

<p>Suppose we have a users table and a companies table with the following structure.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Table Structure
</span><span class='line'>users:
</span><span class='line'>    id
</span><span class='line'>    username
</span><span class='line'>    password
</span><span class='line'>companies:
</span><span class='line'>    id
</span><span class='line'>    user_id
</span><span class='line'>    name
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>For the sake of simplicity lets assume we dont have any other fields in those tables.</p>

<p>Now if we want to insert seed data in those two tables how would we do that in laravel. We would need two seeders one for <code>users</code> table and another for <code>companies</code> table.</p>

<p>Suppose we have Models corresponding to those two entities are already there as <code>User</code> and <code>Company</code> in Laravel.</p>

<!-- more -->


<p>adding seed users in users table is pretty straight forward. We can do it like</p>

<figure class='code'><figcaption><span>UsersTableSeeder.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Faker\Factory</span> <span class="k">as</span> <span class="nx">Faker</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Illuminate\Database\Seeder</span><span class="p">;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UsersTableSeeder</span> <span class="k">extends</span> <span class="nx">Seeder</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">run</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$faker</span> <span class="o">=</span> <span class="nx">Faker</span><span class="o">::</span><span class="na">create</span><span class="p">();</span>
</span><span class='line'>        <span class="nv">$candidates</span> <span class="o">=</span> <span class="nx">Candidate</span><span class="o">::</span><span class="na">lists</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">foreach</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">50</span><span class="p">)</span> <span class="k">as</span> <span class="nv">$index</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nx">User</span><span class="o">::</span><span class="na">create</span><span class="p">([</span>
</span><span class='line'>                <span class="s1">&#39;username&#39;</span> <span class="o">=&gt;</span> <span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">userName</span><span class="p">(),</span>
</span><span class='line'>                <span class="s1">&#39;password&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;secret&#39;</span>
</span><span class='line'>            <span class="p">]);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above seeder will create 50 users for us in database. Now comes the real problem which is the purpose of this blog post. In <code>companies</code> table we have a field named <code>user_id</code> we can just use random integers into that field as that will break relationships between tables. Whatever we want to put in this field that user has to be present in the database already for the models relationships to work properly.</p>

<p>Fortunately, with Laravel thats easy too. Lets have a look at the companies seeder.</p>

<figure class='code'><figcaption><span>CompaniesTableSeeder</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Illuminate\Database\Seeder</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Faker\Factory</span> <span class="k">as</span> <span class="nx">Faker</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CompaniesTableSeeder</span> <span class="k">extends</span> <span class="nx">Seeder</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">run</span><span class="p">(){</span>
</span><span class='line'>        <span class="nv">$faker</span> <span class="o">=</span> <span class="nx">Faker</span><span class="o">::</span><span class="na">create</span><span class="p">();</span>
</span><span class='line'>        <span class="c1">// following line retrieve all the user_ids from DB</span>
</span><span class='line'>        <span class="nv">$users</span> <span class="o">=</span> <span class="nx">User</span><span class="o">::</span><span class="na">all</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">lists</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">foreach</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">50</span><span class="p">)</span> <span class="k">as</span> <span class="nv">$index</span><span class="p">){</span>
</span><span class='line'>            <span class="nv">$company</span> <span class="o">=</span> <span class="nx">Company</span><span class="o">::</span><span class="na">create</span><span class="p">([</span>
</span><span class='line'>                <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">company</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;user_id&#39;</span> <span class="o">=&gt;</span> <span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">randomElement</span><span class="p">(</span><span class="nv">$users</span><span class="p">),</span>
</span><span class='line'>            <span class="p">]);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So first step is to retrieve all the users&rsquo;s id we inserted in <code>UsersTableSeeder</code> then randomly assign those in the <code>user_id</code> field of companies table.</p>

<p>We can get the value of any column of a table using <code>lists(COLUMN_NAME)</code> Eloquent method. Here we need the value of <code>id</code> column. Now after executing <code>$users = User::all()-&gt;lists('id');</code> we will have an array filled with all current users IDs from DB, so in that time those are all valid users.</p>

<p>Faker has a method named <code>randomElement()</code> which takes an array and randomly returns value from that array. So the <code>user_id</code> column of the <code>companies</code> table will be filled with real user id from DB. And after proper relationships are set we will be able to do things like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$company</span> <span class="o">=</span> <span class="nx">Company</span><span class="o">::</span><span class="na">find</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nv">$company_owner</span> <span class="o">=</span> <span class="nv">$company</span><span class="o">-&gt;</span><span class="na">user</span><span class="p">();</span> <span class="c1">// return a User object</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thats how you can seed your database using <code>Faker</code> maintaining model relationships.</p>

<p>One thing remember, for this case you must have to run <code>UsersTableSeeder</code> before running <code>CompaniesTableSeeder</code>.</p>

<p>Thats all for today. Hope you enjoyed it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finally Moving Into Octopress]]></title>
    <link href="http://joycse06.github.io/blog/2014/01/finally-moving-into-octopress/"/>
    <updated>2014-01-29T06:10:46+11:00</updated>
    <id>http://joycse06.github.io/blog/2014/01/finally-moving-into-octopress</id>
    <content type="html"><![CDATA[<p>I have been planning for a long while to move my blog to Github and use Octopress from now on. Couldn&rsquo;t manage time to do that. Now finally I am free from the hassle of maintaining hosting and other details and I love markdown.</p>

<p>From now onward this will be my new homepage and I will try to write posts regularly [ well thats a promise I always break ].</p>

<p>Anyway, let&rsquo;s see how it goes but you know what I am very happy to finally set this up. Thanks for dropping by. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facades in Laravel 4 and Static Methods Resolution]]></title>
    <link href="http://joycse06.github.io/blog/2013/05/facades-in-laravel-4-and-static-methods-resolution/"/>
    <updated>2013-05-28T00:00:00+10:00</updated>
    <id>http://joycse06.github.io/blog/2013/05/facades-in-laravel-4-and-static-methods-resolution</id>
    <content type="html"><![CDATA[<p>Several months ago in a blog post I saw people complaining about Laravel3&rsquo;s Static methods stating Static methods are very difficult to Unit Test with and Laravel is a pile of Static API&rsquo;s rather than a framework. I dont remember the Link. It said Laravel 3 is not architecturally “pure”, but it has super clean syntax.</p>

<p>But Laravel 4 combines both of those things. It’s extremely architecturally pure, yet maintains the same terse, expressive syntax.</p>

<p>Last weekend I was checking a video on Laravel 4 which was discussing about facades in Laravel 4 and I was truly amazed to see how the fancy looking static API&rsquo;s are mapped into their original Classes. Laravel 4 takes advantage of Facade Design Pattern[ <a href="http://en.wikipedia.org/wiki/Facade_pattern"><a href="http://en.wikipedia.org/wiki/Facade_pattern">http://en.wikipedia.org/wiki/Facade_pattern</a></a> ] which allows it to provide expressive syntax through static API&rsquo;s but still keep it testable under the hood.</p>

<!-- more -->


<p>So, back to the main point of the post, how a static method like</p>

<figure class='code'><figcaption><span>Facade Examples</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">File</span><span class="o">:</span><span class="nx">get</span><span class="p">(),</span><span class="nx">View</span><span class="o">::</span><span class="na">make</span><span class="p">,</span> <span class="nx">Redirect</span><span class="o">::</span><span class="na">to</span><span class="p">,</span> <span class="nx">Cache</span><span class="o">::</span><span class="na">put</span>
</span></code></pre></td></tr></table></div></figure>


<p>is resolved under the hood. Let&rsquo;s take File:get() and see how that maps to it&rsquo;s original class. Seeing File:: I first though there must be a File.php some where where the static method will be available. Searched for that and found one at /vendor/laravel/framework/src/Illuminate/Support/Facades/File.php surprisingly it barely has any content in it.
<a href="https://github.com/illuminate/support/blob/master/Facades/File.php"><a href="https://github.com/illuminate/support/blob/master/Facades/File.php">https://github.com/illuminate/support/blob/master/Facades/File.php</a></a></p>

<figure class='code'><figcaption><span>File Facade</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">namespace</span> <span class="nx">Illuminate\Support\Facades</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">File</span> <span class="k">extends</span> <span class="nx">Facade</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/**</span>
</span><span class='line'><span class="sd">  * Get the registered name of the component.</span>
</span><span class='line'><span class="sd">  *</span>
</span><span class='line'><span class="sd">  * @return string</span>
</span><span class='line'><span class="sd">  */</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">getFacadeAccessor</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s1">&#39;files&#39;</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As I didn&rsquo;t find a static get method there my second target was to search in the Facade Base class as File class was extending it. But there wasn&rsquo;t any static get method either. But I did find a __callStatic magic method and became sure thats handling the call dynamically. You can check the contents of Facade.php here at <a href="https://github.com/illuminate/support/blob/master/Facades/Facade.php#L167"><a href="https://github.com/illuminate/support/blob/master/Facades/Facade.php#L167">https://github.com/illuminate/support/blob/master/Facades/Facade.php#L167</a></a></p>

<p>The first line in __callStatic method is</p>

<figure class='code'><figcaption><span>Resolving Facade</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$instance</span> <span class="o">=</span> <span class="k">static</span><span class="o">::</span><span class="na">resolveFacadeInstance</span><span class="p">(</span><span class="k">static</span><span class="o">::</span><span class="na">getFacadeAccessor</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where&rsquo;s its calling the static resolveFacadeInstance() method and passing child class&rsquo;s static method&rsquo;s static::getFacadeAccessor() return value as a argument. Which is in above you can see returns the string &lsquo;files&rsquo;. Now lets look at the definition of resolveFacadeInstance()</p>

<figure class='code'><figcaption><span>resolveFacadeInstance function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">protected</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">resolveFacadeInstance</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nb">is_object</span><span class="p">(</span><span class="nv">$name</span><span class="p">))</span> <span class="k">return</span> <span class="nv">$name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="k">static</span><span class="o">::</span><span class="nv">$resolvedInstance</span><span class="p">[</span><span class="nv">$name</span><span class="p">]))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">static</span><span class="o">::</span><span class="nv">$resolvedInstance</span><span class="p">[</span><span class="nv">$name</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="k">static</span><span class="o">::</span><span class="nv">$resolvedInstance</span><span class="p">[</span><span class="nv">$name</span><span class="p">]</span> <span class="o">=</span> <span class="k">static</span><span class="o">::</span><span class="nv">$app</span><span class="p">[</span><span class="nv">$name</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>First two conditions wont work for us. So it will return static::$app[$name]. What does $app[&lsquo;file&rsquo;] have in it. Must be an instance of a class. To check this I was studying about the bootstrapping of Laravel 4 and found that at some point in booting up, Laravel 4 registers the service providers passed into it via /app/config/app.php file. And checking that I found a serviceproviders as follows</p>

<figure class='code'><figcaption><span>Service Provider</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="s1">&#39;Illuminate\Filesystem\FilesystemServiceProvider&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then I checked the file Illuminate\Filesystem\FilesystemServiceProvider and found out how $app[&lsquo;files&rsquo;] is being assigned. Here&rsquo;s it&rsquo;s contents</p>

<figure class='code'><figcaption><span>Service Provider</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">FilesystemServiceProvider</span> <span class="k">extends</span> <span class="nx">ServiceProvider</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'> <span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Register the service provider.</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @return void</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">register</span><span class="p">()</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">app</span><span class="p">[</span><span class="s1">&#39;files&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">app</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">share</span><span class="p">(</span><span class="k">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="k">new</span> <span class="nx">Filesystem</span><span class="p">;</span> <span class="p">});</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So $app[&lsquo;files&rsquo;] is actually being assigned to a instance of FileSystem class.
Laravel uses that register method to add that service in the $app container.
So File::domeSomething() is actually somewhat equivalent to</p>

<figure class='code'><figcaption><span>Original Filesystem Class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$fileSystem</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Filesystem</span><span class="p">;</span>
</span><span class='line'><span class="nv">$fileSystem</span><span class="o">-&gt;</span><span class="na">doSomething</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>And I did find a public get() method in the FileSystem Class. You can check here at
<a href="https://github.com/illuminate/filesystem/blob/master/Filesystem.php#L27">https://github.com/illuminate/filesystem/blob/master/Filesystem.php#L27</a></p>

<p>So, a simple call like File::get() which just works, have a lot more going on under the hood.</p>

<p>The word File is actually an alias to the Facade at &lsquo;Illuminate\Support\Facades\File&rsquo; which you can find at /app/config/app.php in alias block.</p>

<p>Thats true for most if not all(well I havent checked all, but lets hope so) static expressive API&rsquo;s Laravel 4 Provide.</p>

<p>A quick way to check which Class is being mapped for a Facade by using a special route in the route file as follows</p>

<figure class='code'><figcaption><span>Getting Facade Accessor</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span><span class="k">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nv">$root</span> <span class="o">=</span> <span class="nb">get_class</span><span class="p">(</span><span class="nx">File</span><span class="o">::</span><span class="na">getFacadeRoot</span><span class="p">());</span>
</span><span class='line'>  <span class="c1">// using other Facade in place of &#39;File&#39; works too</span>
</span><span class='line'>  <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$root</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>It will print the original Class that&rsquo;s being used for the Facade.</p>

<p>I dont know why but finding the whole thing was a great joy for me. It always feels great to understand the inner working principle of a thing I am using. This is the most awesome thing I have learnt/known in a while.</p>

<p>Hope you enjoyed it. :D</p>
]]></content>
  </entry>
  
</feed>
