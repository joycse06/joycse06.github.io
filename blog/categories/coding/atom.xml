<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Coding | Prasenjit Kumar Nag a.k.a Joy]]></title>
  <link href="http://joycse06.github.io/blog/categories/coding/atom.xml" rel="self"/>
  <link href="http://joycse06.github.io/"/>
  <updated>2016-09-18T12:07:26+10:00</updated>
  <id>http://joycse06.github.io/</id>
  <author>
    <name><![CDATA[Joy Nag]]></name>
    <email><![CDATA[joyruet06@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Designing Good Background Jobs: Idempotency]]></title>
    <link href="http://joycse06.github.io/blog/2016/09/designing-good-background-jobs-idempotency/"/>
    <updated>2016-09-18T10:13:50+10:00</updated>
    <id>http://joycse06.github.io/blog/2016/09/designing-good-background-jobs-idempotency</id>
    <content type="html"><![CDATA[<h2>What are Background Jobs?</h2>

<p>Background jobs are almost part and parcel of every modern Web applications now-a-days. It&rsquo;s the process of
deferring time-intensive operations in the background and sending early feedback to end users. Examples of
background jobs could be generating reports, processing large amount of data, sending scheduled emails and
doing any other kind of works which are necessary but not worth blocking the otherwise quick response to
waiting user. I can go on forever with examples of background jobs, candidates for background jobs are
omnipresent (everywhere).</p>

<!-- more -->


<h2>What is an idempotent operation?</h2>

<p>In mathematics, an idempotent opretation (i.e. functions in programming lanauges) is one where <code>F(F(x)) = F(x)</code>.
So you can see, no matter how how many times you apply the functions to the same argument it&rsquo;s equivalent to
applying it only once.</p>

<p>What are some idempotents functions in our day to day programming? There are many, almost every langauges we
work with some kind of <code>abs</code> (absolute) function, which gives you the abosolute value of it&rsquo;s argument.</p>

<p>It&rsquo;s an idempotent operation becuase <code>abs(abs(abs(-10)))</code> is equivalent to <code>abs(-10)</code> and the result will always be <code>10</code>.
Other examples include, Sorting a list of values, transforming a string to all uppercase charecters, Capitalize the first
letter of a string and many others.</p>

<h2>Why idempotency can be a good property of a background job?</h2>

<p>In any sufficiently large web application, there could be lots of background jobs of all sorts. And things fails and fails for
no obvious reasons. Specially, when you have to interact with other systems you have no control over. You can pull your hair when
you get a <code>.NET</code> exception as the response with a <code>200</code> response code for a day. You look at whatever monitoring system or background
jobs console your system have the next day, and you have myriad of failed Jobs.</p>

<p>What do you do? Do you go through all of them one by one
and fix them one by one. Can you just retry all of them without thinking about them? It appears that you can, if your jobs are <code>idempotent</code>
as a whole. The scenario above is just one of many reasons your jobs could fail. You <code>database</code> server could die on your face. You could get
<code>dogshit</code> from another api while your jobs were expecting other things. And as your language is <code>RAD</code> and <code>Dynamic</code>, uses dynamic dispatch it
doesn&rsquo;t care what you are sending where until it&rsquo;s executing it and things fail on your face.</p>

<p>If your job is idempotent, you can be sure that your job is not in an inconsistant state and you can confidently retry all of them.</p>

<h2>What idempotency means for a background job?</h2>

<p>Idempotency can mean all sorts of things, like for a <code>SendOrderToWarehouse</code> job it could be <code>was the order already shipped?</code> or for a
<code>CapturePaymentJob</code> job it could be <code>was the payment already captured?</code>. Ideally the you will be talking through some kind of API for these
actions, so you could think the other end of the communication should make sure these operations are idempotent. But in real world, the best idea
is to not assume anything about other systems. Common sense is not that common.</p>

<h2>Implementing idempotency into a background Job?</h2>

<p>Idempotency could be easily implemented as some kind of <code>status</code> in a persistant storage. If you have a <code>Order</code> record, it could have a boolean
field named <code>shipped</code> which is only set to <code>true</code> after you get successful response from the <code>Warehouse</code> that it has imported the <code>ShippingRequest</code>
into it&rsquo;s system.</p>

<p>Let&rsquo;s implement two sample classes to simulate how <code>idempotency</code> can be implemented in a Job. Code examples are in <code>Ruby</code></p>

<pre><code class="ruby Warehouse">class Warehouse
  # it should be used as a singleton for the sake of this example
  def self.the_warehouse
    @the_warehouse ||= Warehouse.new
  end

  def initialize
    self.shipments = Hash.new { |hash, key| hash[key] = [] }
    self.counter = 0
  end

  # it keeps track of already shipped orders via a hash 
  # (which is an instance var and will persist if the class is used as a singleton)
  def shipments_for(order_id)
    shipments[order_id]
  end

  def ship_order(order_id)
    shipment_id = next_shipment_id
    shipments[order_id] &lt;&lt; shipment_id
    shipment_id
  end

  private

  attr_accessor :shipments, :counter

  def next_shipment_id
    id = format('S%06d', counter)
    self.counter = counter + 1
    id
  end
end
</code></pre>

<p>Now lets implement a simple <code>ShipOrderJob</code></p>

<pre><code class="ruby ShipOrder">class ShipOrderJob
  def self.perform(order_id)
    new(order_id).run
  end

  def initialize(order_id)
    self.order_id = order_id
  end

  def run
    if shipped?
      puts "Order with id# #{order_id} has already been shipped. Skip processing."
      return
    end

    warehouse.ship_order(order_id)
  end

  private

  attr_accessor :order_id

  def shipped?
    !warehouse.shipments_for(order_id).empty?
  end

  def warehouse
    Warehouse.the_warehouse
  end
end
</code></pre>

<p>Now if we enqueue <code>ShipOrder</code> with the same <code>order_id</code> multiple times (one wouldn&rsquo;t enqueue a single job multiple times willingly,
but we could require re-enqueueing them if they fails) after the first instance is executed, it will just ignore all others
with a Log.</p>

<p>Idempotency is not always easy to implement, because in a Complex system a Job can enqueue other jobs and can do all sorts of
complex stuffs.</p>

<p>But the thing is, one should strive towards designing Idempotent Jobs.</p>

<p>N.B. I learned all of this from a Internal Course from of my Company, the the credit goes to the Original creator of the course.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Folding Structures Aka Catamorphisms]]></title>
    <link href="http://joycse06.github.io/blog/2016/09/folding-structures-aka-catamorphisms/"/>
    <updated>2016-09-17T13:28:58+10:00</updated>
    <id>http://joycse06.github.io/blog/2016/09/folding-structures-aka-catamorphisms</id>
    <content type="html"><![CDATA[<h2>What does it mean by Folding or Reducing a data structure?</h2>

<p>Folding or Reducing is the notion of creating a summary value from a list of values contained inside a certain structure.
The structure can be as simple as list of values or a complex structure. The way one will want to reduce the structure is something
that will depend on the end goal or the structure of data. Folding or Reducing generalizes this notion which are also known as Catamorphisms.</p>

<!-- more -->


<h2>Deriving a fold function in Haskell</h2>

<p>I will be providing the code examples in Haskell but they should be generic enough to understand the concept. Lets say we have the following list of values</p>

<pre><code class="haskell">values = [1, 2, 3, 4, 5]
</code></pre>

<p>and we want to know the sum of all these values. In the imperative world we would start with a loop of some kind which will iterate over the values and add them</p>

<pre><code>The following is pseudo-code
sum = 0
for (x in values) {
  sum = sum + x
}
</code></pre>

<p>now say we also need to compute the product of all values in the list, we can do something like following</p>

<pre><code>The following is pseudo-code
product = 1
for (x in values) {
 product = product * x
}
</code></pre>

<p>Similary we may need to find the maximum or minimum of the values. And we are only considering a simple list, it can a tree or anything else.
But the notion of generating a summary value from a structure remains the same.</p>

<p>We programmers are lazy and don&rsquo;t like to write too much boilerplate code. So it would be cool if we could generalize this notion of reducing structures.</p>

<p>What do we need for that, we need a stuructre of some kind, we need a binary operation of some kind (i.e <code>+</code> or <code>*</code>) which takes two values and generate a single value.
And we also need an initial value to start with which is <code>0</code> or <code>1</code> above, if we look carefully we will see the initial value is related to the operation. It&rsquo;s a unit value for the
operation like if you add <code>0</code> to something, it doesn&rsquo;t change, same for <code>1</code> and multiplication.</p>

<p>Lets define the <code>fold</code> function in Haskell,</p>

<pre><code class="haskell fold function">-- our fold function takes another function which takes two values of type a and b
-- and return b, which is our binary operation above,
-- then an intial value of type b and a list [a]
-- and return b
fold :: (a -&gt; b -&gt; b) -&gt; b -&gt; [a] -&gt; b
-- our function is recursive, this is the base case where the list has no more elements left
fold _ acc [] = acc
-- this is the recursive case, where we call the function
-- with first element of the list and another recursive call to fold itself
fold f acc (x:xs) = f x (fold f acc xs)
</code></pre>

<p>In the type signature of <code>fold</code> <code>a</code> <code>b</code> are type variables so they can be of any types. The definition above is the called <code>foldr</code>,
there&rsquo;s also another fold called <code>foldl</code>, their implementation differs on the recursive case but details about that can be put off for
another post.</p>

<h2>Usage of the fold function</h2>

<pre><code class="haskell">values = [1, 2, 3, 4, 5]

sum = fold (+) 0 values -- sum will be 15

product = fold (*) 1 values -- product will be 120
</code></pre>

<p>I am not going to go any further in this blog post but a lot can be done using fold.</p>

<p>But before finishing lets have a look at how a simple call to <code>fold</code> is evaluated under the hood,
by writing out all the recursive calls</p>

<pre><code>fold (+) 0 [1, 2, 3]
1 + (fold (+) 0 [2, 3])
1 + (2 + (fold (+) 0 [3]))
1 + (2 + (3 + (fold (+) 0 [])))
1 + (2 + (3 + 0))
1 + (2 + 3)
1 + 5
6
</code></pre>

<p>Most languages has some kind of <code>fold</code> function now. Hope you understood how folds works generally.</p>

<p>So go ahead and read up on how to reduce an <code>array</code> or a similar data structure in your favorite language and start using it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding the Ubiquitous Notion of Mapping a Function Over a Structure]]></title>
    <link href="http://joycse06.github.io/blog/2016/07/understanding-the-ubiquitous-notion-of-mapping-over-a-structure/"/>
    <updated>2016-07-31T10:53:05+10:00</updated>
    <id>http://joycse06.github.io/blog/2016/07/understanding-the-ubiquitous-notion-of-mapping-over-a-structure</id>
    <content type="html"><![CDATA[<h2>What is Map?</h2>

<p>The notion of Map has become so prevalent in all programming languages that almost everyone has some kind of exposure to it. Generically speaking, <code>Map</code> means applying a function to values which are inside some kind of structure.</p>

<p>We usually use it a lot to apply a function to a list of values e.g mapping over the values of an <code>Array or List</code> to be more specific.</p>

<p>In this post we will first see some examples of mapping in different languages and then we dive deep into it&rsquo;s internals in terms of <code>Haskell</code> and maybe finish with a better understanding of how everything fits together. Saying that lets start.</p>

<!-- more -->


<h2>Some examples of Mapping in some popular langauges</h2>

<h3>JS and JQuery</h3>

<pre><code class="JS Map">
// copies from MDN
var numbers = [1, 2, 3];
var roots = numbers.map(function(x) {
    return Math.pow(x, 2);
}); // =&gt; [ 1, 4, 9]
// the above code squares all values of the array

// In jQuery we always do things like
$( ":checkbox" )
  // which returns all checkboxes
  .map(function() {
    return this.id;
  })
// it applies the anonymous function over that collection of checkboxes and just return
// their ids
</code></pre>

<h3>Ruby</h3>

<pre><code class="Ruby Map">[1, 2, 3].map { |n| n * n } #=&gt; [1, 4, 9]
// which just squares all the values inside the array
</code></pre>

<h3>PHP</h3>

<pre><code class="Php Map">$square = function ($n) {
  return $n * $n;
}

$arr = [1,2,3]
array_map($square, $arr) // =&gt; [1, 4, 9]
// Array is a primitive data type in PHP so we can't do
// $arr.map.....
</code></pre>

<h2>Map internals with Haskell</h2>

<p>So lets see how an implementation of a <code>Map</code> function in Haskell looks like</p>

<pre><code class="Haskell Map implementation">map :: (a -&gt; b) -&gt; [a] -&gt; [b]
-- type signature of map, which says map takes a function ( a -&gt; b ) and a list ( [a] )
-- apply the function on all elements of that list and returns another list ([b])
map f [] = []
-- base case if the function is empty just return an empty list
map f (x:xs) = f x : (map f xs)
-- otherwise apply the function to first element ( head )
-- and call map recursively on the rest of the list ( tail )
-- on a side note (:) is called the cons constructor which adds an element to a list
-- lets see how a simple function like (+1) it will apply to the list [1,2]
-- map (+1) [1,2]
-- (+1) 1 : (+1) 2 : [] ( this [] is coming from the base case of the recursion above) 
-- 2 : 3 : []
-- [2, 3]
</code></pre>

<p>You see how partially applied functions ( <code>(+1)</code> above ) comes in handy.</p>

<p>It&rsquo;s pretty simple right. But why contrain this great idea to only a list of values. Haskell takes it a step further
and generalizes it with an Abstraction named <code>Functor</code>. I will not get into details of <code>Functors</code> but will just use that to demonstrate the generic notion of mapping over a structure. So what is this structure thing I am talking about.</p>

<p>In the application above the list is the structure, it&rsquo;s characteristic is to hold a list of values. <code>Tree</code> is another structure which has <code>leafs</code> and <code>branches</code>. They are ways of organizing data.</p>

<p>The notion of <code>map</code> in generic sense is to apply a function over a strucure. Think of it like you want to throw a function over some kind of structure and apply it to the values inside. This can be any kind of strucure defined by you or in haskell <code>Types</code>. Haskell has a <code>TypeClass</code> named <code>Functor</code> which any custom type can implement and thereby define how map should work for that type.</p>

<p>Lets see how this works for a <code>Tree</code> type.</p>

<pre><code class="Haskell Tree">data Tree a = Leaf a | Branch (Tree a) (Tree a) deriving (Show)
-- in laymen term is defines a tree data type, which has either a leaf or a branch with left
-- or right subtree
-- we can also see it's a recursive data structure as it's left and right subtree holds same structure
-- we get a sense of that from the definition itself
</code></pre>

<p>Now how should map works for this structure. In case of list we only had a list of values. In case of our <code>Tree</code> its a bit different but we still have values in the leaves which we may want to transform, as the owner of the <code>Data Type</code> we know best how to apply the function and on which data inside our structure to apply it to.</p>

<p>Let&rsquo;s see how we can define a <code>map</code> function for our tree.</p>

<pre><code class="Haskell treeMap">treeMap :: (a -&gt; b) -&gt; Tree a -&gt; Tree b
treeMap f (Leaf x) = Leaf (f x)
treeMap f (Branch left right) = Branch (treeMap f left) (treeMap f right)

-- example
treeMap (*2) (Branch (Branch (Leaf 1) (Leaf 2)) (Branch (Leaf 3) (Leaf 4)))
-- which multiplies 2 to every leaf of the tree and returns the new tree as below
Branch (Branch (Leaf 2) (Leaf 4)) (Branch (Leaf 6) (Leaf 8))
-- See all the leafs has been multiplied by 2
-- lets see function composition fits in here if we first want to multiply by 2 and then negate the numbers
-- we can do something like
treeMap (negate. (*2)) (Branch (Branch (Leaf 1) (Leaf 2)) (Branch (Leaf 3) (Leaf 4)))
-- function composition for the win
-- it should return
Branch (Branch (Leaf (-2)) (Leaf (-4))) (Branch (Leaf (-6)) (Leaf (-8)))
</code></pre>

<p>Oh I forgot to say <code>map</code> is a way of transforming data as thats the only way you can chagne data in <code>Pure functinal programming</code> as you can&rsquo;t mutate them in place. But we are lazy programmers, why define a new method or force others to define new map functions for our data types. Haskell abstracts this with <code>Functor</code> as I mentioned above. So lets define an instance of <code>Functor</code> for our tree data type.</p>

<pre><code class="Haskell Functor instance of Tree">
instance Functor Tree where
    fmap f (Leaf x) = Leaf (f x)
    fmap f (Branch left right) = Branch (fmap f left) (fmap f right)
-- it's same as our treeMap and does the same thing
</code></pre>

<p> Once we have our <code>Functor</code> instance for <code>Tree</code> we can use the generic <code>fmap</code> function now to do the same thing we did above</p>

<pre><code class="Haskell fmap example"> let tree = (Branch (Branch (Leaf 1) (Leaf 2)) (Branch (Leaf 3) (Leaf 4)))
  fmap (*2) tree
  -- or
  fmap (neg . (*2)) tree
</code></pre>

<p>  So the generic notion is <code>Map</code> is not just for array or list of values, rather it&rsquo;s a very powerful idea to apply any function over any kind of structures no matter how complex they are.</p>

<p>  Hope you enjoyed it. We may talk more about <code>Functors</code> later and see how haskell takes this idea of mapping to a whole new level and make it a lot more useful.</p>
]]></content>
  </entry>
  
</feed>
