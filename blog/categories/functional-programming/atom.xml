<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Functional-programming, | Prasenjit Kumar Nag a.k.a Joy]]></title>
  <link href="http://joycse06.github.io/blog/categories/functional-programming/atom.xml" rel="self"/>
  <link href="http://joycse06.github.io/"/>
  <updated>2016-10-09T12:37:29+11:00</updated>
  <id>http://joycse06.github.io/</id>
  <author>
    <name><![CDATA[Joy Nag]]></name>
    <email><![CDATA[joyruet06@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Understanding the Ubiquitous Notion of Mapping a Function Over a Structure]]></title>
    <link href="http://joycse06.github.io/blog/2016/07/understanding-the-ubiquitous-notion-of-mapping-over-a-structure/"/>
    <updated>2016-07-31T10:53:05+10:00</updated>
    <id>http://joycse06.github.io/blog/2016/07/understanding-the-ubiquitous-notion-of-mapping-over-a-structure</id>
    <content type="html"><![CDATA[<h2>What is Map?</h2>

<p>The notion of Map has become so prevalent in all programming languages that almost everyone has some kind of exposure to it. Generically speaking, <code>Map</code> means applying a function to values which are inside some kind of structure.</p>

<p>We usually use it a lot to apply a function to a list of values e.g mapping over the values of an <code>Array or List</code> to be more specific.</p>

<p>In this post we will first see some examples of mapping in different languages and then we dive deep into it&rsquo;s internals in terms of <code>Haskell</code> and maybe finish with a better understanding of how everything fits together. Saying that lets start.</p>

<!-- more -->


<h2>Some examples of Mapping in some popular langauges</h2>

<h3>JS and JQuery</h3>

<pre><code class="JS Map">
// copies from MDN
var numbers = [1, 2, 3];
var roots = numbers.map(function(x) {
    return Math.pow(x, 2);
}); // =&gt; [ 1, 4, 9]
// the above code squares all values of the array

// In jQuery we always do things like
$( ":checkbox" )
  // which returns all checkboxes
  .map(function() {
    return this.id;
  })
// it applies the anonymous function over that collection of checkboxes and just return
// their ids
</code></pre>

<h3>Ruby</h3>

<pre><code class="Ruby Map">[1, 2, 3].map { |n| n * n } #=&gt; [1, 4, 9]
// which just squares all the values inside the array
</code></pre>

<h3>PHP</h3>

<pre><code class="Php Map">$square = function ($n) {
  return $n * $n;
}

$arr = [1,2,3]
array_map($square, $arr) // =&gt; [1, 4, 9]
// Array is a primitive data type in PHP so we can't do
// $arr.map.....
</code></pre>

<h2>Map internals with Haskell</h2>

<p>So lets see how an implementation of a <code>Map</code> function in Haskell looks like</p>

<pre><code class="Haskell Map implementation">map :: (a -&gt; b) -&gt; [a] -&gt; [b]
-- type signature of map, which says map takes a function ( a -&gt; b ) and a list ( [a] )
-- apply the function on all elements of that list and returns another list ([b])
map f [] = []
-- base case if the function is empty just return an empty list
map f (x:xs) = f x : (map f xs)
-- otherwise apply the function to first element ( head )
-- and call map recursively on the rest of the list ( tail )
-- on a side note (:) is called the cons constructor which adds an element to a list
-- lets see how a simple function like (+1) it will apply to the list [1,2]
-- map (+1) [1,2]
-- (+1) 1 : (+1) 2 : [] ( this [] is coming from the base case of the recursion above) 
-- 2 : 3 : []
-- [2, 3]
</code></pre>

<p>You see how partially applied functions ( <code>(+1)</code> above ) comes in handy.</p>

<p>It&rsquo;s pretty simple right. But why contrain this great idea to only a list of values. Haskell takes it a step further
and generalizes it with an Abstraction named <code>Functor</code>. I will not get into details of <code>Functors</code> but will just use that to demonstrate the generic notion of mapping over a structure. So what is this structure thing I am talking about.</p>

<p>In the application above the list is the structure, it&rsquo;s characteristic is to hold a list of values. <code>Tree</code> is another structure which has <code>leafs</code> and <code>branches</code>. They are ways of organizing data.</p>

<p>The notion of <code>map</code> in generic sense is to apply a function over a strucure. Think of it like you want to throw a function over some kind of structure and apply it to the values inside. This can be any kind of strucure defined by you or in haskell <code>Types</code>. Haskell has a <code>TypeClass</code> named <code>Functor</code> which any custom type can implement and thereby define how map should work for that type.</p>

<p>Lets see how this works for a <code>Tree</code> type.</p>

<pre><code class="Haskell Tree">data Tree a = Leaf a | Branch (Tree a) (Tree a) deriving (Show)
-- in laymen term is defines a tree data type, which has either a leaf or a branch with left
-- or right subtree
-- we can also see it's a recursive data structure as it's left and right subtree holds same structure
-- we get a sense of that from the definition itself
</code></pre>

<p>Now how should map works for this structure. In case of list we only had a list of values. In case of our <code>Tree</code> its a bit different but we still have values in the leaves which we may want to transform, as the owner of the <code>Data Type</code> we know best how to apply the function and on which data inside our structure to apply it to.</p>

<p>Let&rsquo;s see how we can define a <code>map</code> function for our tree.</p>

<pre><code class="Haskell treeMap">treeMap :: (a -&gt; b) -&gt; Tree a -&gt; Tree b
treeMap f (Leaf x) = Leaf (f x)
treeMap f (Branch left right) = Branch (treeMap f left) (treeMap f right)

-- example
treeMap (*2) (Branch (Branch (Leaf 1) (Leaf 2)) (Branch (Leaf 3) (Leaf 4)))
-- which multiplies 2 to every leaf of the tree and returns the new tree as below
Branch (Branch (Leaf 2) (Leaf 4)) (Branch (Leaf 6) (Leaf 8))
-- See all the leafs has been multiplied by 2
-- lets see function composition fits in here if we first want to multiply by 2 and then negate the numbers
-- we can do something like
treeMap (negate. (*2)) (Branch (Branch (Leaf 1) (Leaf 2)) (Branch (Leaf 3) (Leaf 4)))
-- function composition for the win
-- it should return
Branch (Branch (Leaf (-2)) (Leaf (-4))) (Branch (Leaf (-6)) (Leaf (-8)))
</code></pre>

<p>Oh I forgot to say <code>map</code> is a way of transforming data as thats the only way you can chagne data in <code>Pure functinal programming</code> as you can&rsquo;t mutate them in place. But we are lazy programmers, why define a new method or force others to define new map functions for our data types. Haskell abstracts this with <code>Functor</code> as I mentioned above. So lets define an instance of <code>Functor</code> for our tree data type.</p>

<pre><code class="Haskell Functor instance of Tree">
instance Functor Tree where
    fmap f (Leaf x) = Leaf (f x)
    fmap f (Branch left right) = Branch (fmap f left) (fmap f right)
-- it's same as our treeMap and does the same thing
</code></pre>

<p> Once we have our <code>Functor</code> instance for <code>Tree</code> we can use the generic <code>fmap</code> function now to do the same thing we did above</p>

<pre><code class="Haskell fmap example"> let tree = (Branch (Branch (Leaf 1) (Leaf 2)) (Branch (Leaf 3) (Leaf 4)))
  fmap (*2) tree
  -- or
  fmap (neg . (*2)) tree
</code></pre>

<p>  So the generic notion is <code>Map</code> is not just for array or list of values, rather it&rsquo;s a very powerful idea to apply any function over any kind of structures no matter how complex they are.</p>

<p>  Hope you enjoyed it. We may talk more about <code>Functors</code> later and see how haskell takes this idea of mapping to a whole new level and make it a lot more useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Haskell -- Partial Function Application]]></title>
    <link href="http://joycse06.github.io/blog/2016/07/hello-haskell-partial-function-applicaton/"/>
    <updated>2016-07-24T12:50:05+10:00</updated>
    <id>http://joycse06.github.io/blog/2016/07/hello-haskell-partial-function-applicaton</id>
    <content type="html"><![CDATA[<p>In this blog post, We will be talking shortly about Haskell&rsquo;s type system( which is a very broad topic, this post won&rsquo;t eve scratch the surface). I will just explain what is needed to explain <code>partial function application</code> means and how is it done in Haskell.</p>

<p>N.B. Installing Haskell is very easy with <a href="https://docs.haskellstack.org/en/stable/README/">Stack</a>, if you are on a Mac, you can just do <code>brew install haskell-stack</code> to install Stack. Then starting the <code>repl</code> is as easy as writing <code>stack ghci</code> in your favorite terminal.</p>

<p>Haskell is a statically typed functional programming language. That means everything has a type associated with it and the compiler checks and enforce types at compile time. So there are two phases of code in Haskell one is <code>Type Level Code</code> which involves type definition, type constructors etc. Another is <code>Term Level Code</code> which is the body of the program. That doesn&rsquo;t necessarily mean you will always have to write type signatures for trivial things. Haskell has a very powerful <code>Type Inference</code> system which can infer types from untyped code, so you don&rsquo;t have to specify types of all the things but Haskell will infer them from the code and complain if types of anything doesn&rsquo;t match. It uses <code>Hindley-Milner Inference</code> algorithm( well, an extended version of it for <code>Constrained Types</code>).</p>

<!-- more -->


<h2>What are types?</h2>

<p>Types are how we group a set of values together that share something in common. Sometime that something is abstract and sometime that something is a specific model of a particular concept or domain. We can think of types as <code>Set</code> from mathematics to better guide our intuition. So for example what is the type of number 2, well it&rsquo;s a number, a member of the set of <code>Natural Numbers</code>. Type of <code>a</code> is character. You know this if you have worked with any statically typed programming language before like <code>C/C++ or Java</code>. However Haskell takes it to a whole new level.</p>

<h2>How do we define types for a simple addition function?</h2>

<p>Let&rsquo;s write the function signature first then we will explain it.</p>

<pre><code class="Haskell Type of an add Function">-- declare the type of the function
add :: Integer -&gt; Integer -&gt; Integer
-- now declare the function itself
add x y = x + y
</code></pre>

<p>What we are telling the Compiler by this is we have an <code>add</code> function which takes two
<code>integer</code> and returns result by adding them. If you we remember what I was telling about currying <a href="/blog/2016/07/intro-to-lambda-calculus-and-its-relation-to-functional-programming/">in my previous post</a> you can&rsquo;t accept two params into a single function. You have to define them a nested lambdas, but it&rsquo;s a syntactic sugar Haskell provides to make it more useful, still make the core conform to whatever lambda calculus provides.
So the above function is pretty straight forward. Lets get to the point and talk about the main focus of this blog post.</p>

<h2>Partial function application</h2>

<p>Partial application is the notion of supplying less arguments than the function expects. Let&rsquo;s see an example, we defined an <code>add</code> function in previous section, now if we want to define an <code>increment</code> function in terms of it we can do something like</p>

<pre><code class="Haskell">inc :: Integer -&gt; Integer
inc = add 1
</code></pre>

<p>ahh that seems simple, now lets explain how that works. We are assigning value of <code>add 1</code> as the body of our <code>inc</code> function.</p>

<p>We know from the type signature of <code>add</code> that it takes two integer and return their sum. So what happens when we supply it only one argument. We the value <code>1</code> gets bound to the first param <code>x</code> in the definition of <code>add</code> function and we get something like</p>

<pre><code class="haskell">add 1 y = 1 + y
-- which is equivalent to
\y -&gt; 1 + y -- a lambda which just add one to it's argument
</code></pre>

<p>Which is another function. A partially applied one. If we want to see it from the point of Lambda Calculus it will be more clear</p>

<pre><code class="bash"># our add functions equivalent lambda calculus expression will be
𝜆x.𝜆y.x+y
# now if we apply 1 to it
(𝜆x.𝜆y.x+y) 1
# which gets bound to the left most lambda and it becomes
𝜆y.1+y
# because we can get rid of a lambda after its applied to a value
# finally what we get is a another lambda waiting for an argument
</code></pre>

<p>Thats what is happening with our <code>add</code> function too because haskell is typed lambda calculus. So <code>add 1</code> is an partially applied function waiting for another application to a value. It&rsquo;s easy but a very powerful idea, and lets one write cool functions in terms of other simpler functions. <em>Composability for the win!.</em></p>

<p>We can similarly write these functions too,
<code>Haskell
multiplyTen = (10 * )
-- * is a infix binary operator, so it requires two arguments
-- as we supplied one, it's a partially applied one and waiting for another
-- argument
-- we can invoke it like
multiplyTen 10
-- and it will give us 100
helloWorld = ("Hello " ++ )
-- ++ is the infix binary string concatenation operator( actually a function
-- requiring two arguments), we only supplied one so it's waiting for another one
-- if we run
helloWorld "World!"
-- it will return "Hello World!"
</code></p>

<p>The examples in this blog post were intentionally contrived but The idea of <code>partial function application</code> is a profound one and we can do all sort of cool things with it.</p>

<p>Thats all for today. Hope you enjoyed it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro to Lambda Calculus and It's Relationship to Functional Programming]]></title>
    <link href="http://joycse06.github.io/blog/2016/07/intro-to-lambda-calculus-and-its-relation-to-functional-programming/"/>
    <updated>2016-07-23T17:38:18+10:00</updated>
    <id>http://joycse06.github.io/blog/2016/07/intro-to-lambda-calculus-and-its-relation-to-functional-programming</id>
    <content type="html"><![CDATA[<p>This post is written based on the First Chapter (All you need is lambda) of the <a href="http://haskellbook.com/">HaskellBook</a> which is great book for learning Haskell. All the code examples in this post will be using Haskell but should be understandable to anyone having decent experience in any programming language.</p>

<p>Lambda calculus is a model of computation devised in the 1930s by Alanzo Church. It&rsquo;s one process for formalizing a method. Like Turing machines it formalizes the concept of effective computability, thus determining which problems or classes of problems, can be solved.
You might be thinking but thats Calculus(Math), how is it related to functional programming or programming in general. It is indeed deeply related.</p>

<!-- more -->


<p>Lets define Functional programming, we know that functional programming is a programming paradigm that relies on functions modeled on mathematical functions. The essence of functional programming is that programs are a combination of expressions. Expressions include concrete values, variables and also functions. Functional programming languages are all based on the lambda calculus. Though some of them incorporate features into the language that are not translatable into lambda expressions. Haskell doesn&rsquo;t do that because it&rsquo;s a pure functional language. We will not get into what it means for a functional programming language to be <em>Pure</em> because it&rsquo;s an topic of it&rsquo;s own.</p>

<h2>What is a function ( in Math )?</h2>

<p>We all have studied in High school math( Set theory ), that a function is a relation between a set of inputs and a set of outputs. The function itself defines and represents the relationship. For example, when you apply the addition function to two inputs, it maps those two inputs to an output &ndash; the sum of those numbers. A simple function can be <code>f(x) = x + 1</code> which takes one argument named <code>x</code>. The relationship between the input and the output is described in the function body. For this function, it will add 1 to whatever value x is and return that result.</p>

<p>When we apply the above function to a value, such as 1, we substitute the value in for x:</p>

<pre><code>f(1) = 1 + 1 = 2
</code></pre>

<p><em>Understanding functions in this way - as a mapping of a set of inputs to a set of outputs is crucial to understanding functional programming.</em></p>

<h2>Structure of Lambda Terms</h2>

<p>The lambda calculus has three basic components, or lambda terms: <code>expressions</code>, <code>variables</code> and <code>abstractions</code>. The word <code>expression</code> refers to a superset of all those things: an expression that can be a variable name, an abstraction or a combination of those things.</p>

<p>An <em>abstraction</em> is a <em>function</em>. It is a lambda term that has a head and a body and  is applied to an argument. An argument is an input value. The head of a function is a <code>𝜆(lambda)</code> followed by a variable name.The body of the function is another expression. So a simple function might look like: <code>𝜆x.x</code> . It&rsquo;s an identity function because it just return the argument passed to it. In the previous example of <code>f(x) = x + 1</code> we were talking about a function called <code>f</code>, but the lambda abstraction <code>𝜆x.x</code> has no name. It&rsquo;s an <em>anonymous function (we all are familiar with this term, because it&rsquo;s a very powerful idea and almost all imperative languages have some sort of implementation of it too)</em>. In the definition the dot separates the parameters of the lambda function from the body.</p>

<h3>Beta reduction</h3>

<p>When we apply a function to an argument, we substitute the input expression for all instances of bound variables within the body of the abstraction. We then also eliminate the head of the abstraction, since it&rsquo;s only purpose was to bind a variable. This process is called <em>beta reduction</em>.</p>

<p>An example of a beta reduction can be:</p>

<pre><code class="bash Example of Beta Reduction">we have this lambda 𝜆x.x ,
if we want to apply the number 2 into the lambda above,
we simply substitute 2 for each bound variable in the body of the function,
and eliminate the head:
(𝜆x.x) 2
2
As another example, if we have 𝜆x.x+1
then if we apply 2 it becomes
(𝜆x.x+1) 2
==&gt; 2+1
==&gt; 3
</code></pre>

<p>I could continue and do some more complex <em>beta reductions</em> but will restrain myself</p>

<h3>Multiple arguments</h3>

<p>Each lambda can only bind one parameter and can only accept one argument. Functions that require multiple arguments have multiple, nested heads. When you apply it once and eliminate the first(left-most) head, the next one is applied and so on. This formulation is named after <em>Haskell Curry</em> and is commonly called currying. So
<code>
𝜆xy.xy
is actually convenient shorthand for two nested lambdas( one for each argument, x and y)
like following
𝜆x.(𝜆y.xy)
</code></p>

<h3>Evaluation is simplification</h3>

<p>There is a thing named <em>beta normal form</em> in lambda calculus. It&rsquo;s a form when you can&rsquo;t beta reduce(apply lambdas to arguments) the term any further. This corresponds to a fully evaluated expression, or, in programming a fully executed program. In terms of executing a program it could mean continue applying lambda functions to their arguments until it become irreducible at which point the execution will finish. For example <code>𝜆x.x</code> is in beta normal form as we can&rsquo;t reduce it any further with what we have.
But <code>(𝜆x.x) 2</code> is not because it&rsquo;s an lambda awaiting an application so we can reduce it to <code>2</code> by replacing instances of <code>x</code> with <code>2</code> in the body of the the lambda. <code>2</code> is in <em>beta normal form</em> because it&rsquo;s a literal value and we can&rsquo;t reduce it any further.</p>

<h2>Relationship with functional programming</h2>

<p>Like I said earlier Functional programming languages are based on <em>Lambda Calculus</em>, as we have learned a bit more about <em>lambdas</em> we can relate more about how they are connected. We might have heard the phrase <em>Functions are first class citizens in functional languages</em>. Lets explain that a bit. Imperative languages usually treat functions differently than other values(variables, objects and other inhabitants of a program) in the program though that is changing with omnipresence of lambdas(anonymous) function everywhere.</p>

<p>But in functional languages functions are just like any other value. You can toss function around, return another function from a function body, compose functions to build complex functionalities from simple functions and all sorts of cool things.</p>

<p>And if the function is a pure( like mathematical one) which always return the same output for the same input you don&rsquo;t even need to care where the function is being evaluated, be it in another core of the same machine or in the cloud because you don&rsquo;t need to care. All you want is the result of applying the function to an input.</p>

<p><em>Building Software is a complex task</em> and Composability is a(<em>or is the</em>) way to handle complexity. You start with simple building blocks and compose them to build complex program to solve complex problems. Pure functions are such building blocks.</p>

<p>In a way, programs in functional languages are like reducing expressions(remember <em>beta reduction</em> from last paragraph). The compilers continue evaluating expressions until it reaches a point when it can&rsquo;t reduce the expression anymore and the execution is complete.</p>

<p>I wont get any deeper into this in this post. Research and learn more if you are still not bored.</p>

<h2>Haskell, Haskell, Haskell</h2>

<p>Haskell is purely based on <em>Lambda Calculus</em>. In fact it&rsquo;s typed lambda calculus. On the surface level it has some syntactic sugar which could lead one to believe this thing doesn&rsquo;t have a equivalent form in lambda calculus. But it ultimately boils down a very simple intermediate language construct which is then evaluated by STG(Spineless Tagless Graph-Reducing Machine) which is a abstract virtual machine and convert that code into binary. It has some very powerful abstractions understanding which properly could enable anyone to write better code in any other languages(This is not something I am saying myself, I have heard it countless times from many great programmers). By the way, Haskell is not the only language in which you can learn functional programming, but it&rsquo;s definitely one of the good ones.</p>

<h3>Some Haskell examples</h3>

<p>I will not explain any of the syntaxes, will just try to relate some of the things I mentioned above with haskell code.
You can type them in <code>ghci</code> repl and they should run fine.</p>

<h4>A lambda in haskell is very similar to lambda from lambda calculus,</h4>

<pre><code class="haskell A simple Lambda">\x -&gt; x + 1
-- which takes a single param and add 1 to it, we can use it like
(\x -&gt; x + 1) 2
</code></pre>

<h4>Haskell supports currying, so you can define function which can take multiple arguments, like</h4>

<pre><code class="Haskell Simple Addition Function">add x y = x + y
-- which is in de-sugared form becomes similar to
let add = \x -&gt; \y -&gt; x + y
</code></pre>

<h4>Composing functions in Haskell is very easy</h4>

<pre><code class="Haskell Function composition">-- lets define a square function
let square x = x * x
-- lets define a sum function which takes a list and add all the values
let sum = foldr (+) 0

-- and another function which negate the argument
let neg = negate -- negate is a standard function

-- now using the above function we can define our complex function( hint: compose them)
let negateSquaredSum = neg . square . sum

-- now you can call it like
negateSquaredSum [1,2,3,4]
-- which will result in -100
</code></pre>

<p>In our case they are simple function. But they can be anything, and we can then execute the smaller building blocks ( <code>neg</code>, <code>square</code> and <code>sum</code>) anywhere(could be other cores or maybe in the cloud) and then combine the results.</p>

<p>Its not about Haskell, you can do the above in any language, it&rsquo;s about the idea of <code>function composition</code> or in general <code>composition</code>.</p>

<p>The best thing about all the above codes no matter how complex they become, they are type checked by the compiler. Haskell is a statically and strongly typed language. So if your program compiles there&rsquo;s a much greater chance it will work.</p>

<p>Enough for a single blog post. Hope you enjoyed it. Stay tuned for more Haskell and functional programming related posts.</p>
]]></content>
  </entry>
  
</feed>
