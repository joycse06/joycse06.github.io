<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web | Prasenjit Kumar Nag a.k.a Joy]]></title>
  <link href="http://joycse06.github.io/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://joycse06.github.io/"/>
  <updated>2016-07-24T13:26:04+10:00</updated>
  <id>http://joycse06.github.io/</id>
  <author>
    <name><![CDATA[Joy Nag]]></name>
    <email><![CDATA[joyruet06@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Laravel View Presenters From Scratch]]></title>
    <link href="http://joycse06.github.io/blog/2015/01/laravel-view-presenters-from-scratch/"/>
    <updated>2015-01-16T02:34:14+11:00</updated>
    <id>http://joycse06.github.io/blog/2015/01/laravel-view-presenters-from-scratch</id>
    <content type="html"><![CDATA[<h2>Why do We need View Presenters?</h2>

<p>View should be dumb, they shouldn&rsquo;t do much other than showing data to the user. So where&rsquo;s the correct place to place your view specific logic in Laravel. Like you need the gravatar url of the user to see if the user already has a gravatar set to save the user from uplaoding a new one in your site. Or maybe you save user name as two field in db, as <code>first_name</code> and <code>last_name</code>, now you need to create user&rsquo;s full name, but you also want apply the function <code>ucfirst</code> first on them. Or maybe you have users profile pic&rsquo;s filename saved in database, now you need to create profile pic url from that by concatenating the upload directory.</p>

<p>Where should we put this sorts of logic. Eloquent Model? This can seem a very tempting choice, but why should the Model handle View specific logics. Then where is the place to put this kind of things?</p>

<p>Well maybe in their own class whose only responsibility will be to do all the logic needed in view using a specific model.</p>

<p>In laravel, there&rsquo;s ins&rsquo;t any built in way to do 1-to-1 Model-Presenter mapping out of the box but it&rsquo;s incredibly easy to set up one.</p>

<!-- more -->


<h2>So what do we need</h2>

<ul>
<li>define a present mentod or any method in every Eloquent model which will return a presenter instance for that model and if you use anything like <code>$model-&gt;present()-&gt;gravatar_url()</code> or <code>$model-&gt;present-&gt;gravatar_url</code> both will actually call a function named <code>gravatar_url</code>on the <code>Presenter</code> class.</li>
<li>make it easy for the view to use it, like view shouldn&rsquo;t be requried to know where that url is coming from.</li>
<li>and finally maybe hide away some common Presenter functionality into an abstract class so every presenter class wont have to implement those</li>
</ul>


<h2>Implementing the present() method in every Eloquent Model</h2>

<p>The responsiblity of the <code>present()</code> method will be to</p>

<ul>
<li>first somehow dertermine the FQN(Fully Qualified Name) of the Presenter class so we can instantiate them</li>
<li>After we get that class name, we check if that class exists, and if they doesnt exist they you can either throw an exception( which is better ) or fail silently if you want. And if it&rsquo;s there then just instantiate it and return the instance.</li>
</ul>


<h3>How to determine the FQN of the Presenter Class</h3>

<p>There are several ways we can do that, it entirely depends on how we want to desing our app. We can find the Current Model&rsquo;s class name append <code>Presenter</code> in their name and search in the same directory or in a separate <code>Presenters</code> directory which is on a different namespace to find the presenter class.</p>

<p>But it&rsquo;s better not to hard code that logic inside a function and make it more flexible. Like we can look for a <code>$presenter</code> variable in the Model where we will save the Presenters full path so our funciton can use it. That way we can save the Presenter anywhere we want.</p>

<h3>Creating a Presentable Trait</h3>

<p>The functions of the <code>present()</code> method seems to be same for every models, so we could just use a trait for it and use it in every model. Lets see a reference implementation of the trait,</p>

<pre><code class="php PresentableTrait">
&lt;?php namespace Acme\Core\Presenter;


trait PresentableTrait {

    /* This is where we will save the presenterInstance so use later on the same model object */
    protected $presenterInstance;

    public function present()
    {
        // Check if the preserneter property has been declared on the model and 
        // the class exists

        if( ! $this-&gt;presenter or ! class_exists($this-&gt;presenter)){

              // We didn't find a presenter class, throw an exception
              // I am assuming we have a PresenterException defined already
            throw new PresenterException('Please set the Presenter path to your Presenter FQN');
        }

          // The good old Singleton pattern
        if( ! $this-&gt;presenterInstance )
        {
            $this-&gt;presenterInstance = new $this-&gt;presenter($this);
        }

        return $this-&gt;presenterInstance;
    }
}
</code></pre>

<p>The functionality of the trait is fairly straight forward. We have a variable called <code>$persenterInterface</code> to save the <code>Presenter Instance</code> for further use. I have added comments on the code to make it easier to understand.</p>

<h3>Creating a base Presenter class</h3>

<p>We can ignore this if we want, just adding the <code>Presenter Class</code> is enough for the functionality. But lets add some sytactic sugar using the <code>__get()</code> magic method so when you do something like <code>$user-&gt;present()-&gt;gravatar_url</code> it actually calls the method with that name. Though <code>gravatar_url</code> is actually a method on the presenter we will be able to use it like a property.</p>

<p>Lets check the following abstract Presenter class</p>

<pre><code class="php Base Presenter Class">&lt;?php namespace Acme\Core\Presenter;


abstract class Presenter {

    protected $entity; // This is to store the original model instance

    function __construct($entity)
    {
        $this-&gt;entity = $entity;
    }

    // Call the function if that exsits, or return the property on the original model
    public function __get($property){
        if(method_exists($this, $property))
        {
            return $this-&gt;{$property}();
        }

        return $this-&gt;entity-&gt;{$property};
    }
}
</code></pre>

<p>In the above trait we actually passed the model instance to the presenter while instantiating that. And hence we have received that in the constructor of the base class.</p>

<h2>Usage</h2>

<p>Lets see how can we use this in a project with an Eloquent Model.</p>

<p>Lets do it for the <code>User</code> model. First we will define the <code>Presenter</code> class.</p>

<pre><code class="php Acme\Users\UserPresenter.php">
&lt;?php namespace Acme\Users;

use Acme\Core\Presenter\Presenter;

class UserPresenter extends Presenter {

    // return users gravatar url
    public function gravatar($size = 30)
    {
        $email = md5($this-&gt;email);

        return "//www.gravatar.com/avatar/{$email}?s={$size}";
    }

    public function fullname()
    {
        return ucfirst($this-&gt;first_name). ' '.ucfirst($this-&gt;last_name);

    }
}
</code></pre>

<p>We see in the user Presenter we used <code>$this-&gt;email</code>, <code>$this-&gt;first_name</code> and <code>$this-&gt;last_name</code>. We are being able to do that due the magic getter method we defined which automatically returns the property on the associated model if a function with that name doesn&rsquo;t exist in the <code>Presenter</code> itself.</p>

<p>Now lets create an <code>User</code> model.</p>

<pre><code class="php Acme\Users\User.php">
&lt;?php namespace Acme\Users;

use Acme\Core\Presenter\PresentableTrait;

class User extends \Eloquent {

    use PresentableTrait;

    protected $presenter = 'Acme\Users\UserPresenter';

}
</code></pre>

<p>And we are done. We can now use it like,</p>

<pre><code class="php Presenter Usage">
$user = User::find(1);

// now we can use
$user-&gt;present()-&gt;gravatar_url; // this returns users gravatar url

// or 

$user-&gt;present()-&gt;fullname; // This will return users full name
</code></pre>

<p>You can use those methods anywhere on any <code>model</code> instance which has the <code>Presenter</code> implemented. Be it inside your controller or in your bade templates.</p>

<p><strong><em>So now you have a clean way to place all your presentation specific logic. As they are in a single class it&rsquo;s easier to maintain and you can refactor any method&rsquo;s body anytime without worrying about breaking anything on other parts of your application.</em></strong></p>

<p>Hope you enjoyed it.</p>

<p><strong>N. B. This post is inspired by Jeffrey Way&rsquo;s View presenter related lessons on Laracasts.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Command Driven Design: The World of DTOs, Handlers and Domain Events]]></title>
    <link href="http://joycse06.github.io/blog/2015/01/command-driven-design-the-world-of-dtos-handlers-and-domain-events/"/>
    <updated>2015-01-06T05:04:18+11:00</updated>
    <id>http://joycse06.github.io/blog/2015/01/command-driven-design-the-world-of-dtos-handlers-and-domain-events</id>
    <content type="html"><![CDATA[<p>Command driven desing is quite a new buzzword in php world which the community is adopting quickly. Lets dive into some theoritical details of whats and whys of this desing patterns. Code examples will be based on <code>Laravel</code>.</p>

<h2>Coming out from the CRUD mentality</h2>

<p>We developer like to think in terms of CRUD(CREATE, READ, UPDATE, DELETE) like kind of one-to-one mapping with business needs and out models but all business needs doesn&rsquo;t go well with CRUD.</p>

<!-- more -->


<p>Like there&rsquo;s a task named <strong>Charge client</strong> for some kind of service. This action is not easily mappable to CRUD with any model. And there can be tasks which affects more than one model in complex ways. Bending the tasks or the client to think in terms of CRUD is not the solution, rather this bending should be the opposite. We developers should look for patterns to bend to our thinking process to align more with the complex business needs. Command driven design is a solution to this problem where you can have commands like <code>RegisterUserCommand</code> , <code>PublishJobCommand</code>, <code>UpdateUserProfileCommand</code>, <code>SubscribeUserToSilverPlanCommand</code> and any others use cases you have in your application.</p>

<p>There are several benefits of this using this pattern:</p>

<ol>
<li><p>You can have really skinny controllers. HTTP itself is very simple and controllers are just gateways to your application, it&rsquo;s better not do all kinds of business things in your controllers. That breaks the <code>Single Responsibility</code> principle of <code>SOLID</code>. Using commands you can easily achieve this.</p></li>
<li><p>You can have better seperation of concerns in your application. With all your busiess entities seperated from others parts of the application, command from all kinds of business tasks and unified command pipeline for handling command.</p></li>
</ol>


<p>Let me give you an example, With everything properly set up, lets see how a <code>user register</code> action method of registration controller will look like,</p>

<pre><code class="php RegistrationController@register">
pubic function register()
{

    $this-&gt;exectute(RegisterUserCommand::class);

    Redirect::home();
}   
</code></pre>

<p>Just see how clean it looks. Dont think it doesnt perform validation or other tasks required for user registration.</p>

<p>Lets list the tasks the above action is doing under the hood.</p>

<ul>
<li>Firstly the execute command might be coming from a <code>Trait</code> which does all the heavy lifting. It creates a DTO(Data Transfer Object) with required constructor parameters required for user registration like username, email etc from the POST data.</li>
<li>Then it call the proper vaidator for that command, you can determine yourself how the command bus will determine the FQN(Fully Qualified Name) of the vaidator class. After determining that the command bus will pass the command object to the Validator for input validation and checking business constraints. If the input from user doesnt pass the validation then it might throw a <code>FormValidationException</code> for which we can set up a global exception handler and just send a response to client from that handler without returning the control to the controller action at all.</li>
<li>And if the validation passes, the command bus then determine the <code>handler</code> class for the command call maybe the <code>handle()</code> method on that class and that method create the <code>user</code> save it to database of any kind which is also decoupled from the <code>handler</code> itself.</li>
<li>After creating user the handler dispatch <code>UserHasRegistered</code> event, for which we can listen for using another listener class. Once that listener class has been invoked it can do all sorts of background tasks like, sending welcome email, adding users to a mailing list, sending confirmation email and anything else your business require. And all of that can go into the queue without keeping user waiting for this tasks.</li>
</ul>


<p>From the face of all sorts of tasks it&rsquo;s doing, it may seem intimidating at first glance. But once you have basic command bus and event dispatching system set up then just by following some convetions you can work pretty fast.</p>

<p>The real benefit of it maintanence. If you have application with a lifecycle of several years, if you don&rsquo;t follow best practices it can soon become  your headace. Even as the sole developer you will fear to touch it after sometime when its already a mess with controller actions doing all sort of things which necessarily controllers concern.</p>

<p>Another benefit of this approach is you can expose API for your project pretty easily as you have everything conatained already, exposting is just setting up new <code>routes</code> for it and You are done. Because you are doing all your heavy lifting in their self contained objects.</p>

<p>Lets clarify some terms:</p>

<h2>DTO</h2>

<p> <code>Data Transfer Objects</code> are instances of simple classes with public properties to pass between different componets of your application. A simple <code>RegisterUserCommand</code> DTO can look like (Taken from one of my personal project)</p>

<pre><code class="php Saphira/Users/Commands/RegisterUserCommand.php">
&lt;?php namespace Saphira\Users\Commands;

use Saphira\Core\CommandBus\CommandInterface;

class RegisterUserCommand implements CommandInterface{

    public $email;

    public $password;

    public $password_confirmation;


    public $username;

    public $confirmation_code;

    public function __construct($username, $email, $password, $password_confirmation){

        $this-&gt;email = $email;
        $this-&gt;password = $password;
        $this-&gt;username = $username;
        $this-&gt;confirmation_code = bin2hex(openssl_random_pseudo_bytes(16));
        $this-&gt;password_confirmation = $password_confirmation;
    }

}
</code></pre>

<p>as you see it has everything I need for user registration. And the cool thing is that the parameter on the the constructor of this class is auto-magically resolved form <code>laravel's Input::all()</code> store where all get and post variables are stored.</p>

<p>Likewise, A sample <code>RegisterUserHandler</code> can look like,</p>

<pre><code class="php Saphira/Users/Handlers/RegisterUserHandler.php">
&lt;?php namespace Saphira\Users\Handlers;


use Saphira\Core\CommandBus\CommandInterface;
use Saphira\Core\CommandBus\CommandHandlerInterface;
use Saphira\Core\Events\DispatchableTrait;
use Saphira\Users\User;
use Saphira\Users\UserRepository;

class RegisterUserHandler implements CommandHandlerInterface{

    use DispatchableTrait;

    protected $repository;

    public function __construct(UserRepository $repository)
    {

        $this-&gt;repository = $repository;
    }

    public function handle(CommandInterface $command)
    {

        $user = User::register(
            $command-&gt;username, $command-&gt;email, $command-&gt;password,
            $command-&gt;confirmation_code
        );

        $this-&gt;repository-&gt;save($user);

        $this-&gt;dispatchEventsFor($user);

        return $user;
    }
}
</code></pre>

<p>And with these two and some other classes( like <code>EventListener</code>, <code>RegisterUserValidator</code> etc) placed in proper directories my <code>RegistrationController@store</code> method is as simple as following</p>

<pre><code class="php RegistrationController.php">
public function store()
{
        $user = $this-&gt;execute(RegisterUserCommand::class);

        Auth::login($user);

        Flash::success('Your registration has been successful. You are logged in now.');

        return Redirect::home();
}
</code></pre>

<p>I dont have any input validation or anything in this action as they are all done in the command pipeline.</p>

<h2>Conclusion</h2>

<p>This kinda patterns takes some time to sink your head in them, but once you have the core set up then its really feels much better working on the project and you feel confident and better about it&rsquo;s long term maintenance. I have learned most of it from this <a href="https://laracasts.com/series/commands-and-domain-events">Laracasts</a> series and from many other sources. I will be writting more about it. Stay tuned!</p>

<p>Hope you enjoyed it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I Learned From the 'Architecture, the Lost Years' Talk by Uncle Bob]]></title>
    <link href="http://joycse06.github.io/blog/2015/01/what-i-learned-from-the-architecture-the-lost-years-talk-by-uncle-bob/"/>
    <updated>2015-01-03T15:05:35+11:00</updated>
    <id>http://joycse06.github.io/blog/2015/01/what-i-learned-from-the-architecture-the-lost-years-talk-by-uncle-bob</id>
    <content type="html"><![CDATA[<p>I was watching <a href="https://www.youtube.com/watch?v=WpkDN78P884">this talk</a> from <a href="https://sites.google.com/site/unclebobconsultingllc/">Uncle Bob</a> a while ago and been thinking a lot about the content. Though he primarily talked about Rails in a Ruby Conf, the content is framework agnostic and apply to all other MVCs/frameworks as well.</p>

<!-- more -->


<p>I will be writing a summary of what I have understood so far of it.</p>

<p>Firstly, <strong>the top level directory structure of an application should not communicate any information about the tools being used to build the app.</strong></p>

<p>Like in any MVC, when we look at the top level directory of any MVC framework based app we see directories like Controllers, Models, Views etc which gives us idea about the MVC pattern which is not related to the intent of the application being developed.</p>

<p>He told that WEB is a delivery mechanism and tools are just detail of the project. The application itself should be decoupled from the tools so it&rsquo;s framework agnostic.</p>

<p>He was talking about slow tests, and told Cucumber is not slow, it&rsquo;s a nice little library. What is slow is to boot up whole Rails to run the tests? Because the application is so coupled with the tools.</p>

<p>He talked about interactors, kind of the bridge between your domain level entities and business logic with the delivery mechanism.</p>

<p>If an application can be developed that way then the domain entities/business logic could be packaged as a gem or jar and can be completly decoupled from the delivery mechanism.</p>

<p>He also told views should not be aware of business objects/entities, instead one should use some kind of bridge like viewmodel/presenters to communicate those information into views so the views are so stupid that you don&rsquo;t have to test it.</p>

<p>He was talking about a use case architecture of a project he built, where they used TDD(Red-Green-Refactor cycle) to do the whole app. It was a WiKi app. They started building it with TDD without any persistance layer, and they were storing objects in memory to do testing. Then at some point, when they were in need a persistent data store they wrote a new plugin to replace the in memory store with a file based storage. They developed the whole thing and deployed it to clients without any kind of database.</p>

<p>Then one day one client came and they need a real database due to some business policy restrictions. To fullfil that request they wrote a real database storage plugin to replace the filesytem storage with a DBMS in one day.</p>

<p>He told it as an example architecture of how a decoupled component-based can help refactor things so easily and the project was fully unit tested they could refactor and deploy it within days without worrying about breaking something.</p>

<p>Got this elements summary in <a href="http://hugo.ferreira.cc/post/28240089877/keynote-architecture-the-lost-years-by-robert">this post</a></p>

<blockquote><p>Entities — Generic application agnostic data and business rules (e.g. Order, Customer).</p>

<p>Interactors — Application specific business rules; Manipulates the relevant data from the Request Model and interacts with the Entities.</p>

<p>Boundaries / Gateways — Protocols or Interfaces.</p>

<p>Models — Dumb data structures, without methods.</p>

<p>Request Model
Response Model
View Model</p>

<p>Controllers — Convert the stuff submitted by the delivery mechanism into a delivery agnostic Request Model.</p>

<p>Presenters — Turns the delivery agnostic Response Model into a prepared “viewbified” data structure ready for easy manipulation by the view.</p>

<p>&ldquo;… so the view is so stupid that you don’t have to test it!&rdquo;</p></blockquote>

<p>Here are some good things he told in the talk:</p>

<ul>
<li><h3>Web is a delivery Mecahnism</h3></li>
<li><h3>Database is a detail and not any integral part of the intent of the applicaiton itself</h3></li>
<li><h3>A good architecture allows major decisions to be deferred, like choosing a persistance storage</h3></li>
<li><h3>A good architecture maximizes the number of decisions not made, so you can decide those later and plug them in to fit business needs or respond to changes in business logic</h3></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving Magento Store From One Server to Another Easily Using Ssh]]></title>
    <link href="http://joycse06.github.io/blog/2014/12/moving-magento-from-one-server-to-another-easily-using-ssh/"/>
    <updated>2014-12-11T00:40:11+11:00</updated>
    <id>http://joycse06.github.io/blog/2014/12/moving-magento-from-one-server-to-another-easily-using-ssh</id>
    <content type="html"><![CDATA[<p>When I first started working with Magento I thought moving a magento installation with lots of data from one server to another wont be easy considering the db size is very big and the codebase is not small either.</p>

<p>I was a noob at linux server&rsquo;s stuff then, I am not good at all now, but I have become better than before. And after moving several Magento installations around, creating development sandboxes from live data with large databases like 4GB+ I do think with some terminal kungfu you can pretty easily move magento from one  server to another. The method I will show will required <code>ssh</code> access to both servers.</p>

<!-- more -->


<p>I will walk you through step by step,</p>

<h2>Exporting the current Magento Database</h2>

<p>To export the current database magento is using, first <code>ssh</code> into the server and then find the database config from magento config file located at <code>app/etc/local.xml</code> . In that file you will see a connection node like following</p>

<p><code>xml app/etc/local.xml</code>
    <connection>
          <host>&lt;![CDATA[localhost]]&gt;</host>
          <username>&lt;![CDATA[username]]&gt;</username>
          <password>&lt;![CDATA[password]]&gt;</password>
          <dbname>&lt;![CDATA[dbname]]&gt;</dbname>
          <initStatements>&lt;![CDATA[SET NAMES utf8]]&gt;</initStatements>
          <model>&lt;![CDATA[mysql4]]&gt;</model>
          <type>&lt;![CDATA[pdo_mysql]]&gt;</type>
          <pdoType>&lt;![CDATA[]]&gt;</pdoType>
          <active>1</active>
    </connection>
&#8220;`</p>

<p>So you have DB access to export the database magento is using. You can use <code>mysqldump</code> to dump the database using the following command:</p>

<pre><code class="bash mysqldump">
mysqldump -h DB_HOST -u DB_USER -p DB_NAME &gt; EXPORT_FILENAME.sql
</code></pre>

<p>It will prompt you for password and after you provide that it will start dumping the database into the file you specified. It can take time depending on the amount of data you have in your magento store. Like in my case it took quite some time to export a database of size around 4GB. Once done, you will get a uncompressed sql file whose size can be reduced easily. As it&rsquo;s a text file it&rsquo;s compression ratio will be good and you should get a file much smaller in size. You can compress it using <code>tar</code></p>

<pre><code class="bash tar">tar -czf  EXPORT_FILENAME.sql.tar.gz EXPORT_FILENAME.sql
</code></pre>

<h2>Moving the database into the new server</h2>

<p>If it&rsquo;s a very big dump then you should be using <code>scp</code> (Secure Copy over ssh) to save yourself time. That would reduce the step of downloading it in your local machine first and then re upload into the new server. If you have <code>ssh</code> access of the new server then you should definitely try to use <code>scp</code> . For that login into the old server where you have the exported database dump then run a command like</p>

<pre><code class="bash scp">
 scp -P SSH_PORT /PATH/TO/EXPORT_FILENAME.sql.gz username@NEW_SERVER_IP:/NEW/SERVER/PATH/
</code></pre>

<p>It will copy the database over to the new server in no time, in server&rsquo;s internet speed which is high in most cases.</p>

<p>You can copy the magento codebase the same way over to the new server.</p>

<h2>Importing the database into the new server</h2>

<p>First <code>untar</code> the copied database into it&rsquo;s original <code>.sql</code> format. Use the following command,</p>

<pre><code class="bash untar">
tar -xzf EXPORT_FILENAME.sql.tar.gz
</code></pre>

<p>After this step you will have a file named <code>EXPORT_FILENAME</code> in the current directory you are in.</p>

<p>Create a new database in the new server either from command line using <code>mysql cli</code> or from <code>cpanel</code> or any kind of database administration tool and then <code>ssh</code> into the new server. Then you can import the copied database dump into the newly created database using the following command,</p>

<pre><code class="bash mysql import">
mysql -u DB_USER -p DB_NAME &lt; EXPORT_FILENAME.sql
</code></pre>

<p>It will ask for password, will take some time and eventually import the database into the new server.</p>

<h2>Updating Database config in Code and base url in database</h2>

<p>Like I said copy over the magento codebase the say way with <code>scp</code> or in any other way you want. Now update the database config in <code>app/etc/local.xml</code> file.</p>

<p>You also have to update the <code>base_url</code> in <code>core_config_data</code> table of magento which it uses internally to render links throughout the site. Load the <code>core_config_data</code> table into any database browser like <code>Sequel Pro</code> or <code>PHPMyAdmin</code> . You will see that table has a column named <code>path</code> . Search for path values of <code>web/unsecure/base_url</code> and <code>web/secure/base_url</code> and replace the value which is of the old site with the new web root of your magento installation you copied a while ago.</p>

<p>As you may have guessed from the path names <code>secure</code> and <code>unsecure</code> <code>base_url</code> means what they should mean and they are the <code>http</code> and <code>https</code> urls of your new magento home.</p>

<p>You can now load the new url in browser and it should load the new site. If it doesn&rsquo;t then you might have to clear the cache of the site. The <code>cache</code> directory is in <code>app/var/cache</code> . Remove the contents of that directory and you should be done. You could remove the contents of that directory from command line using the following command too</p>

<pre><code class="bash rm">
rm -rf ./app/var/cache/*
</code></pre>

<p>If you still face any problem in loading the new site then you should try to debug the specific problem you are having. Thats all for today. Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taking a Magento Site Into Maintenance Mode for Everyone Except You]]></title>
    <link href="http://joycse06.github.io/blog/2014/12/taking-a-magento-site-into-maintenance-mode-for-everyone-except-you/"/>
    <updated>2014-12-10T18:54:25+11:00</updated>
    <id>http://joycse06.github.io/blog/2014/12/taking-a-magento-site-into-maintenance-mode-for-everyone-except-you</id>
    <content type="html"><![CDATA[<p>Magento takes a dead simple approach for activating the maintanence mode for any site using it. You just get into servers&rsquo;s terminal via <code>ssh</code> , <code>cd</code> into the magento root folder and run the following command <code>touch maintenance.flag</code> or just crate a file named <code>maintenance.flag</code> in the root of the your magento installation and voila, you will see the maintenance mode message when you visit your store now.</p>

<p>Now Its locked for everyone, but say you are updating somethings on the site and you would like to check how thats affecting the look of the store but you dont want anyone to view it before getting done. Fortunately thas easy too.</p>

<!-- more -->


<p>If you look into the <code>index.php</code> at your magento root folder you will see a code block like below</p>

<pre><code class="php index.php">$maintenanceFile = 'maintenance.flag';
if (file_exists($maintenanceFile)) {
    include_once dirname(__FILE__) . '/errors/503.php';
    exit;
}
</code></pre>

<p>I guess you understand what it does from the look of it, it just checks if the  <code>maintenance.flag</code> file and if it exists it include the <code>errors/503.php</code> file which contains the maintenance mode message. On a side note you can edit that file to change the message or to add some styling.</p>

<p>Now we want it to stay same for other but to allow us to view the site. How can you determine the request came from your machine in that script? Well you might already know, you have a public identifier which is your <code>PUBLIC IP</code> , and by using that you can bypass that check and view the site.</p>

<p>To make the solution a more robust we will use an array of IPs so you can whitelist more peoples like maybe your co-worker, or your QA or your boss. First we create an array like this, <code>$allowed = array('27.147.178.86','27.147.185.185');</code> , you can add as many IPs as you want in that array and each one of those owners will be able to view the store while it&rsquo;s still in maintenance mode. Now to get the IP of a Specific HTTP request you can go around the easier way with something like
  <code>$ip = $_SERVER['REMOTE_ADDR'];</code> But keep in mind that might not always work like when user is using behind a proxy server. Search in google for a better way to find the IP address using PHP.</p>

<p>We are almost done, just append <code>&amp;&amp; !in_array($ip, $allowed)</code> in the condition of <code>if</code> and you are done. The function <code>in_array</code> checks if the first argument is present in the array passed int he second argument and return true if found, we are negating the output of the function, because we want that part of the condition to return false and proceed with the code execution if the request came from one of the specified IPs.</p>

<p>Thats all you need. I am adding the complete code below.</p>

<pre><code class="php index.php">
$ip = $_SERVER['REMOTE_ADDR'];
$allowed = array('27.147.178.84','27.147.180.185','96.240.89.118');

if (file_exists($maintenanceFile) &amp;&amp; !in_array($ip, $allowed)) {
    include_once dirname(__FILE__) . '/errors/503.php';
    exit;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
