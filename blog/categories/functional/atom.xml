<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Functional | Prasenjit Kumar Nag a.k.a Joy]]></title>
  <link href="http://joycse06.github.io/blog/categories/functional/atom.xml" rel="self"/>
  <link href="http://joycse06.github.io/"/>
  <updated>2016-07-31T13:17:03+10:00</updated>
  <id>http://joycse06.github.io/</id>
  <author>
    <name><![CDATA[Joy Nag]]></name>
    <email><![CDATA[joyruet06@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Functional Programming : My Intro to Higher Order Functions]]></title>
    <link href="http://joycse06.github.io/blog/2014/12/functional-programming-my-intro-to-higher-order-functions/"/>
    <updated>2014-12-15T17:14:01+11:00</updated>
    <id>http://joycse06.github.io/blog/2014/12/functional-programming-my-intro-to-higher-order-functions</id>
    <content type="html"><![CDATA[<p>In University time, I was mainly acquainted to C/CPP programming with some Java. Then to me  <code>function</code> was something special and very different than other inhabitants of the my then programming world. In that time I couldn&rsquo;t even think of passing/returning functions to other functions.</p>

<p>Then sometime at the end of 2009, while I was learning Javascript I saw different behaviors and JS seemed more liberal to me. Like I could declare functions without name, could also assign them to variables, It was like wow to me. I read about anonymous functions and IIFE( Immediately-Invoked Function Expression ) and they amazed me back then. I first learned from Hasin Hayder while working in Leevio that I can assign name of a function to a variable  and call them like any other function and could even play with their scope with <code>apply</code> and <code>call</code> <code>Prototype</code> methods.</p>

<p> <!-- more --></p>

<p> Then anonymous function and closure kind of became normal to me while working with <code>PHP</code> and found I could even respond to undefined method calls in <code>PHP</code> Using <code>__call()</code> and <code>_callStatic()</code> <code>magic methods</code> . I didn&rsquo;t know that there&rsquo;s more surprise waiting for me.</p>

<p> While playing with <code>Scala</code> I found I can pass a function to another function and using that function argument that function can return new function with new behaviors. Like a generator function. It was amazing to me. I bet it might amaze you too if you are not already familiar with it.</p>

<p> These kind of functions are called <code>Higher Order Functions</code>, functions which takes other functions as argument works on them and may return new functions. Functions are <code>First Class Citizens</code> in functional languages. <strong>That means function are just like any other value. They can be passed/returned to/from other functions.</strong></p>

<p> Enough rambling. Lets define a higher order function in <code>Scala</code>.</p>

<p> We want to define a function to find the sum of the a range of values, sum of their squares and sum of their cubes. In any imperative language we would just create three functions and calculate the sum using a loop. We can do the same in <code>scala</code> using recursion and three different function. But we dont want to do that.</p>

<p>Lets see the higher order function definition first and then I will explain that.</p>

<pre><code class="scala Higher Order Function">def sum(f: Int =&gt; Int): (Int, Int) =&gt; Int = {
    def sumF(a: Int, b: Int): Int =
        if (a &gt; b) 0
        else f(a) + sumF(a + 1, b)
    sumF
}
</code></pre>

<p>The syntax can seem a bit odd to those not familiar with <code>scala</code> at all. The definition of the function tells that, the function <code>sum</code> takes another function as argument which is of signature <code>f: Int =&gt; Int</code> means that functions takes an integer and return an integer too. The part of the function definition after <code>:</code> which is <code>(Int, Int) =&gt; Int</code> tells the compiler that <code>sum</code> returns an function of type <code>(Int, Int) =&gt; Int</code> which means it takes two integers and return one as result.</p>

<p>Then we define another function inside the main <code>sum</code> function which is recursive version of a loop which runs from <code>a to b</code> which is our range and calculate the sum by passing each integer to the input function. Then at the last line of the definition we just have <code>sumF</code> which is the name of the function we declared inside. And If you dont already know scala return the result of last statement as return value of the functions and explicit return is not necessary which is the case in other functional languages too.</p>

<p>Now we can use this function to generate our desired functions like following,</p>

<pre><code class="scala Derived functions">
def sumInts         = sum(x =&gt; x)
def sumSquares      = sum(x =&gt; x * x)
def sumCubes        = sum(x =&gt; x * x * x)

/*
 x =&gt; x * x is just a syntactic sugar and  the short version of

 def square(x: Int): Int = {
    x * x
 }

 then we could just use
 def sumSquares  = sum(square)
*/
</code></pre>

<p>Here we are defining these functions by passing in an anonymous functions to the function <code>sum</code> . An anonymous function of the form <code>x =&gt; x * x</code> create an function which takes a single argument <code>x</code> and returns <code>x * x</code> which is the square of the argument.</p>

<p>Other than this we could also use the <code>factorial</code> function from <a href="/blog/2014/12/a-bite-of-functional-programming/">my last blog post</a> and declare a sum of factorials function like</p>

<pre><code class="scala Sum of factorials">
def sumFactorials = sum(factorial)
</code></pre>

<p>and after these we can just use any of <code>sumInts(10, 20)</code> or <code>sumSquares(10 , 20)</code> etc to get the sum of the outputs of those functions.</p>

<p>These are very trivial things for any good functional programmer or any great programmer in general but the concept of this amazed me a lot. And I am really happy that I can do this now.</p>

<p>We could improve the declaration of our <code>sum</code> function to use <code>tail recursion</code> like I talked about in <a href="/blog/2014/12/a-bite-of-functional-programming/">my previous post</a>.</p>

<p>Maybe thats all from me for <code>scala</code> for the time being, I decided to learn <code>Clojure</code> instead and will be writing on that as I learn new cool things.</p>

<p>I am not a very good writer and not a very good programmer either. But I am trying to be good at both. You could always ask me things in comment and I will try my best to clarify things more if I can.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Bite of Functional Programming]]></title>
    <link href="http://joycse06.github.io/blog/2014/12/a-bite-of-functional-programming/"/>
    <updated>2014-12-15T03:25:02+11:00</updated>
    <id>http://joycse06.github.io/blog/2014/12/a-bite-of-functional-programming</id>
    <content type="html"><![CDATA[<p>I love programming languages and trying a new one is always fun. A year or so ago I first heard the name of functional paradigm of programming. I have came across blog posts, saw people talking about functional programming in programming communities over the last year. I have seen countless veteran programmers referring <code>SICP</code> as a must read for anyone who wants to be really good in programming. When I went over to search for <code>SICP</code> found the videos of original lecture of <code>Hal Abelson</code> and I heard the name of <code>LISP</code> from him while checking the first lecture.</p>

<p>From then on I have been cherishing a desire to learn a functional language and went ahead to try learning some like <code>Haskell</code>, <code>Clojure</code> and <code>Scala</code> though couldn&rsquo;t get too far with anyone of them. But after every few months something inside me pushes me to get back to learning a functional language well and I spend several days reading blogs, trying out simple things.</p>

<!-- more -->


<p>Enrolled in <code>Functional Programming in Scala</code> Course in <code>CourseEra</code> two times but couldn&rsquo;t or didn&rsquo;t finish in either of those enrolments. But while doing the exercise of first/second chapter of the scala course I did some trivial things like <code>finding factorial of a number</code> and <code>a parantheses matching program</code> which got me more interested into it.</p>

<p>Though I am a know-nothing in functional programming, I decided I will be good enough in one of the functional languages someday. But I have a habit of digressing from the main target sometimes specially while learning something and over this very short period of time I have checked blogs/videos on many things related to functional paradigm like <code>monads</code>, <code>monoids</code>,  <code>STM(Software Transactional Memory</code>, <code>Programming without side effects</code>, <code>Code as data</code>, <code>Higher Order functions</code> and many more. Though most of the things went over my head, I understood they are much profound ideas or concepts and understanding those properly will definitely make me a better programming.</p>

<p> Enough talking, lets do some trivial functional programming together maybe <code>finding the factorial of a number</code> . Lets do it in scala first.</p>

<pre><code class="scala factorial.scala">
def factorial(n:Int):Int =
    if (n==0)
        1
    else
        n * factorial(n-1)
</code></pre>

<p>This program is fairly straight forward for anyone with basic programming background. The syntax can seem alien to anyone like me who doesn&rsquo;t know <code>Scala</code> but the functional body is pretty simple for anyone who knows <code>recursion</code> . We know factorial of a number is defined as <code>factorial(n) = n*(n-1)*....*1</code> . So in terms of recursion from <code>Imperative Paradigm</code> we see the base case is when value of <code>n</code> reaches <code>zero</code> we return one otherwise we call the same function recursively.</p>

<p>so the call stack for a call of <code>factorial(5)</code> would look like</p>

<pre><code>factorial(5)
5*(factorial(4))
5*(4*(factorial(3)))
5*(4*(3*(factorial(2))))
5*(4*(3*(2*(factorial(1))))))
</code></pre>

<p>We see with each call we get more and more <code>*'s</code> and all steps stacks up in the call stack in memory which definitely have a limited amount of space. So if the number we want to calculate the factorial for is big enough we can get good old <code>Stack Overflow Error</code>. So whats the solution to this. Most good languages has a features called <code>Tail Recursion Optimization</code> which is, if the  <code>recursive</code> call is of the same form as the main function call then the compiler/interpreter will resuse the same call stack instead of creating a new one each time.</p>

<p>But we cant just make the last call <code>factorial(n-1)</code> in that case we will lose the number n. So to make it tail recursive we can redefine the function like</p>

<pre><code class="scala factorial">
def factorial(n:Int, accumulator: Int): Int =
    if ( n==0 )
        accumulator
    else
        factorial((n-1), n*accumulator)
</code></pre>

<p>Now the last recursive call is of the same function signature and scala interpreter is design to optimize it with the feature called <code>Tail Recursion Optimization</code> . But this one also has one limitation, it requires the user of the function to pass 1 as the value of the <code>accumulator</code> which is a burden for the user and it wont return correct result if the user doesn&rsquo;t provide 1 as the value of the <code>accumulator</code> . To avoid this and provide user the same function signature like <code>factorial(number)</code> we can use a local function inside the main function. Such a function definition will look like</p>

<pre><code class="scala factorial">def factorial(number: Int) : Int = {
    def factorialWithAccumulator( number: Int, accumulator: Int) : Int = {
        if (number == 1)
            return accumulator
        else
            factorialWithAccumulator( number - 1, accumulator * number)
    }
    factorialWithAccumulator(number, 1)
 }
</code></pre>

<p>Now this function can be called like  <code>factorial(5)</code> and we can use it to calculate factorial of much bigger number as it&rsquo;s optimized we wont get  <code>Stack Overflow</code> error. Another thing we can do is to use the  <code>@tailrec</code> annotation before any function you expect the compiler to optimize and in that case the compiler will warn you if it cant optimize that recursive function.</p>

<p>That&rsquo;s all for today. I will be writing more about functional programming as I learn more about it.</p>
]]></content>
  </entry>
  
</feed>
